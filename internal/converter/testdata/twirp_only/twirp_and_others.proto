syntax = "proto3";

package twirp_only.twirp_and_others;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "gnostic/openapi/v3/annotations.proto";

option go_package = "github.com/sudorandom/protoc-gen-connect-openapi/internal/converter/testdata/twirp_and_others";

option (gnostic.openapi.v3.document) = {
  info: {
    title: "Twirp Haberdasher API"
    version: "1.0.0"
    description: "A simple Twirp Haberdasher API with various annotations."
  }
};

service Haberdasher {
  rpc MakeHat(Size) returns (Hat) {
    option (google.api.http) = {
      post: "/v1/hats"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {
      summary: "Make a new hat"
      description: "Creates a new hat with the specified size, color, and name."
      tags: ["Hats"]
    };
  }
}

message Size {
  option (gnostic.openapi.v3.schema) = {
    title: "Hat Size"
    description: "Defines the size of the hat in inches."
  };
  int32 inches = 1 [
    (buf.validate.field).int32.gte = 1,
    (buf.validate.field).int32.lte = 100,
    (gnostic.openapi.v3.property) = {
      description: "The size of the hat in inches (1-100)."
      example: {yaml: "12"}
    }
  ];
}

message Hat {
  option (gnostic.openapi.v3.schema) = {
    title: "Hat Details"
    description: "Details of a newly created hat."
  };
  int32 size = 1 [
    (buf.validate.field).int32.gte = 1,
    (buf.validate.field).int32.lte = 100,
    (gnostic.openapi.v3.property) = {
      description: "The size of the hat in inches."
      example: {yaml: "12"}
    }
  ];
  string color = 2 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 20,
    (gnostic.openapi.v3.property) = {
      description: "The color of the hat."
      example: {yaml: "red"}
    }
  ];
  string name = 3 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 50,
    (gnostic.openapi.v3.property) = {
      description: "The name of the hat."
      example: {yaml: "Fedora"}
    }
  ];
}