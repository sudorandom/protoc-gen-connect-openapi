{
  "openapi": "3.1.0",
  "info": {
    "title": "envoy.test"
  },
  "paths": {
    "/envoy.test.ClusterDiscoveryService/StreamClusters": {
      "post": {
        "tags": [
          "envoy.test.ClusterDiscoveryService"
        ],
        "summary": "StreamClusters",
        "operationId": "envoy.test.ClusterDiscoveryService.StreamClusters",
        "parameters": [
          {
            "name": "Connect-Protocol-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/connect-protocol-version"
            }
          },
          {
            "name": "Connect-Timeout-Ms",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/connect-timeout-header"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/connect+json": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryRequest"
              }
            },
            "application/connect+proto": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryRequest"
              }
            },
            "application/grpc": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryRequest"
              }
            },
            "application/grpc+proto": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryRequest"
              }
            },
            "application/grpc+json": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryRequest"
              }
            },
            "application/grpc-web": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryRequest"
              }
            },
            "application/grpc-web+proto": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryRequest"
              }
            },
            "application/grpc-web+json": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Error",
            "content": {
              "application/connect+json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/connect+proto": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc+proto": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc+json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc-web": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc-web+proto": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc-web+json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/connect+json": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryResponse"
                }
              },
              "application/connect+proto": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryResponse"
                }
              },
              "application/grpc": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryResponse"
                }
              },
              "application/grpc+proto": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryResponse"
                }
              },
              "application/grpc+json": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryResponse"
                }
              },
              "application/grpc-web": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryResponse"
                }
              },
              "application/grpc-web+proto": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryResponse"
                }
              },
              "application/grpc-web+json": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/envoy.test.ClusterDiscoveryService/DeltaClusters": {
      "post": {
        "tags": [
          "envoy.test.ClusterDiscoveryService"
        ],
        "summary": "DeltaClusters",
        "operationId": "envoy.test.ClusterDiscoveryService.DeltaClusters",
        "parameters": [
          {
            "name": "Connect-Protocol-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/connect-protocol-version"
            }
          },
          {
            "name": "Connect-Timeout-Ms",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/connect-timeout-header"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/connect+json": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryRequest"
              }
            },
            "application/connect+proto": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryRequest"
              }
            },
            "application/grpc": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryRequest"
              }
            },
            "application/grpc+proto": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryRequest"
              }
            },
            "application/grpc+json": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryRequest"
              }
            },
            "application/grpc-web": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryRequest"
              }
            },
            "application/grpc-web+proto": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryRequest"
              }
            },
            "application/grpc-web+json": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Error",
            "content": {
              "application/connect+json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/connect+proto": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc+proto": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc+json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc-web": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc-web+proto": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              },
              "application/grpc-web+json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/connect+json": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryResponse"
                }
              },
              "application/connect+proto": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryResponse"
                }
              },
              "application/grpc": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryResponse"
                }
              },
              "application/grpc+proto": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryResponse"
                }
              },
              "application/grpc+json": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryResponse"
                }
              },
              "application/grpc-web": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryResponse"
                }
              },
              "application/grpc-web+proto": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryResponse"
                }
              },
              "application/grpc-web+json": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DeltaDiscoveryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/envoy.test.ClusterDiscoveryService/FetchClusters": {
      "post": {
        "tags": [
          "envoy.test.ClusterDiscoveryService"
        ],
        "summary": "FetchClusters",
        "operationId": "envoy.test.ClusterDiscoveryService.FetchClusters",
        "parameters": [
          {
            "name": "Connect-Protocol-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/connect-protocol-version"
            }
          },
          {
            "name": "Connect-Timeout-Ms",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/connect-timeout-header"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/envoy.service.discovery.v3.DiscoveryResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "envoy.config.core.v3.SocketAddress.Protocol": {
        "type": "string",
        "title": "Protocol",
        "enum": [
          "TCP",
          "UDP"
        ]
      },
      "google.protobuf.NullValue": {
        "type": "string",
        "title": "NullValue",
        "enum": [
          "NULL_VALUE"
        ],
        "description": "`NullValue` is a singleton enumeration to represent the null value for the\n `Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`."
      },
      "envoy.config.core.v3.Address": {
        "type": "object",
        "allOf": [
          {
            "anyOf": [
              {
                "required": [
                  "envoyInternalAddress"
                ]
              },
              {
                "required": [
                  "pipe"
                ]
              },
              {
                "required": [
                  "socketAddress"
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "required": [
                        "envoyInternalAddress"
                      ]
                    },
                    {
                      "required": [
                        "pipe"
                      ]
                    },
                    {
                      "required": [
                        "socketAddress"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        ],
        "anyOf": [
          {
            "required": [
              "envoyInternalAddress"
            ]
          },
          {
            "required": [
              "pipe"
            ]
          },
          {
            "required": [
              "socketAddress"
            ]
          },
          {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "envoyInternalAddress"
                  ]
                },
                {
                  "required": [
                    "pipe"
                  ]
                },
                {
                  "required": [
                    "socketAddress"
                  ]
                }
              ]
            }
          }
        ],
        "properties": {
          "socketAddress": {
            "allOf": [
              {
                "title": "socket_address"
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.SocketAddress"
              }
            ]
          },
          "pipe": {
            "allOf": [
              {
                "title": "pipe"
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.Pipe"
              }
            ]
          },
          "envoyInternalAddress": {
            "allOf": [
              {
                "title": "envoy_internal_address",
                "description": "Specifies a user-space address handled by :ref:`internal listeners\n \u003cenvoy_v3_api_field_config.listener.v3.Listener.internal_listener\u003e`."
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.EnvoyInternalAddress"
              }
            ]
          }
        },
        "title": "Address",
        "additionalProperties": false,
        "description": "Addresses specify either a logical or physical address and port, which are\n used to tell Envoy where to bind/listen, connect to upstream and find\n management servers."
      },
      "envoy.config.core.v3.BuildVersion": {
        "type": "object",
        "properties": {
          "version": {
            "allOf": [
              {
                "title": "version",
                "description": "SemVer version of extension."
              },
              {
                "$ref": "#/components/schemas/envoy.type.v3.SemanticVersion"
              }
            ]
          },
          "metadata": {
            "allOf": [
              {
                "title": "metadata",
                "description": "Free-form build information.\n Envoy defines several well known keys in the source/common/version/version.h file"
              },
              {
                "$ref": "#/components/schemas/google.protobuf.Struct"
              }
            ]
          }
        },
        "title": "BuildVersion",
        "additionalProperties": false,
        "description": "BuildVersion combines SemVer version of extension with free-form build information\n (i.e. 'alpha', 'private-build') as a set of strings."
      },
      "envoy.config.core.v3.ControlPlane": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "title": "identifier",
            "description": "An opaque control plane identifier that uniquely identifies an instance\n of control plane. This can be used to identify which control plane instance,\n the Envoy is connected to."
          }
        },
        "title": "ControlPlane",
        "additionalProperties": false,
        "description": "Identifies a specific ControlPlane instance that Envoy is connected to."
      },
      "envoy.config.core.v3.EnvoyInternalAddress": {
        "type": "object",
        "allOf": [
          {
            "anyOf": [
              {
                "required": [
                  "serverListenerName"
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "required": [
                        "serverListenerName"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        ],
        "anyOf": [
          {
            "required": [
              "serverListenerName"
            ]
          },
          {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "serverListenerName"
                  ]
                }
              ]
            }
          }
        ],
        "properties": {
          "serverListenerName": {
            "type": "string",
            "title": "server_listener_name",
            "description": "Specifies the :ref:`name \u003cenvoy_v3_api_field_config.listener.v3.Listener.name\u003e` of the\n internal listener."
          },
          "endpointId": {
            "type": "string",
            "title": "endpoint_id",
            "description": "Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a\n single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for\n example, may be set to the final destination IP for the target internal listener."
          }
        },
        "title": "EnvoyInternalAddress",
        "additionalProperties": false,
        "description": "The address represents an envoy internal listener.\n [#comment: TODO(asraa): When address available, remove workaround from test/server/server_fuzz_test.cc:30.]"
      },
      "envoy.config.core.v3.Extension": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "description": "This is the name of the Envoy filter as specified in the Envoy\n configuration, e.g. envoy.filters.http.router, com.acme.widget."
          },
          "category": {
            "type": "string",
            "title": "category",
            "description": "Category of the extension.\n Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\"\n for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from\n acme.com vendor.\n [#comment:TODO(yanavlasov): Link to the doc with existing envoy category names.]"
          },
          "typeDescriptor": {
            "type": "string",
            "title": "type_descriptor",
            "description": "[#not-implemented-hide:] Type descriptor of extension configuration proto.\n [#comment:TODO(yanavlasov): Link to the doc with existing configuration protos.]\n [#comment:TODO(yanavlasov): Add tests when PR #9391 lands.]"
          },
          "version": {
            "allOf": [
              {
                "title": "version",
                "description": "The version is a property of the extension and maintained independently\n of other extensions and the Envoy API.\n This field is not set when extension did not provide version information."
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.BuildVersion"
              }
            ]
          },
          "disabled": {
            "type": "boolean",
            "title": "disabled",
            "description": "Indicates that the extension is present but was disabled via dynamic configuration."
          },
          "typeUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "type_urls",
            "description": "Type URLs of extension configuration protos."
          }
        },
        "title": "Extension",
        "additionalProperties": false,
        "description": "Version and identification for an Envoy extension.\n [#next-free-field: 7]"
      },
      "envoy.config.core.v3.Locality": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "title": "region",
            "description": "Region this :ref:`zone \u003cenvoy_v3_api_field_config.core.v3.Locality.zone\u003e` belongs to."
          },
          "zone": {
            "type": "string",
            "title": "zone",
            "description": "Defines the local service zone where Envoy is running. Though optional, it\n should be set if discovery service routing is used and the discovery\n service exposes :ref:`zone data \u003cenvoy_v3_api_field_config.endpoint.v3.LocalityLbEndpoints.locality\u003e`,\n either in this message or via :option:`--service-zone`. The meaning of zone\n is context dependent, e.g. `Availability Zone (AZ)\n \u003chttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\u003e`_\n on AWS, `Zone \u003chttps://cloud.google.com/compute/docs/regions-zones/\u003e`_ on\n GCP, etc."
          },
          "subZone": {
            "type": "string",
            "title": "sub_zone",
            "description": "When used for locality of upstream hosts, this field further splits zone\n into smaller chunks of sub-zones so they can be load balanced\n independently."
          }
        },
        "title": "Locality",
        "additionalProperties": false,
        "description": "Identifies location of where either Envoy runs or where upstream hosts run."
      },
      "envoy.config.core.v3.Metadata": {
        "type": "object",
        "properties": {
          "filterMetadata": {
            "type": "object",
            "title": "filter_metadata",
            "additionalProperties": {
              "allOf": [
                {
                  "title": "value"
                },
                {
                  "$ref": "#/components/schemas/google.protobuf.Struct"
                }
              ]
            },
            "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``\n namespace is reserved for Envoy's built-in filters.\n If both ``filter_metadata`` and\n :ref:`typed_filter_metadata \u003cenvoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata\u003e`\n fields are present in the metadata with same keys,\n only ``typed_filter_metadata`` field will be parsed."
          },
          "typedFilterMetadata": {
            "type": "object",
            "title": "typed_filter_metadata",
            "additionalProperties": {
              "allOf": [
                {
                  "title": "value"
                },
                {
                  "$ref": "#/components/schemas/google.protobuf.Any"
                }
              ]
            },
            "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``\n namespace is reserved for Envoy's built-in filters.\n The value is encoded as google.protobuf.Any.\n If both :ref:`filter_metadata \u003cenvoy_v3_api_field_config.core.v3.Metadata.filter_metadata\u003e`\n and ``typed_filter_metadata`` fields are present in the metadata with same keys,\n only ``typed_filter_metadata`` field will be parsed."
          }
        },
        "title": "Metadata",
        "additionalProperties": false,
        "description": "Metadata provides additional inputs to filters based on matched listeners,\n filter chains, routes and endpoints. It is structured as a map, usually from\n filter name (in reverse DNS format) to metadata specific to the filter. Metadata\n key-values for a filter are merged as connection and request handling occurs,\n with later values for the same key overriding earlier values.\n\n An example use of metadata is providing additional values to\n http_connection_manager in the envoy.http_connection_manager.access_log\n namespace.\n\n Another example use of metadata is to per service config info in cluster metadata, which may get\n consumed by multiple filters.\n\n For load balancing, Metadata provides a means to subset cluster endpoints.\n Endpoints have a Metadata object associated and routes contain a Metadata\n object to match against. There are some well defined metadata used today for\n this purpose:\n\n * ``{\"envoy.lb\": {\"canary\": \u003cbool\u003e }}`` This indicates the canary status of an\n   endpoint and is also used during header processing\n   (x-envoy-upstream-canary) and for stats purposes.\n [#next-major-version: move to type/metadata/v2]"
      },
      "envoy.config.core.v3.Metadata.FilterMetadataEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "allOf": [
              {
                "title": "value"
              },
              {
                "$ref": "#/components/schemas/google.protobuf.Struct"
              }
            ]
          }
        },
        "title": "FilterMetadataEntry",
        "additionalProperties": false
      },
      "envoy.config.core.v3.Metadata.TypedFilterMetadataEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "allOf": [
              {
                "title": "value"
              },
              {
                "$ref": "#/components/schemas/google.protobuf.Any"
              }
            ]
          }
        },
        "title": "TypedFilterMetadataEntry",
        "additionalProperties": false
      },
      "envoy.config.core.v3.Node": {
        "type": "object",
        "allOf": [
          {
            "anyOf": [
              {
                "required": [
                  "userAgentBuildVersion"
                ]
              },
              {
                "required": [
                  "userAgentVersion"
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "required": [
                        "userAgentBuildVersion"
                      ]
                    },
                    {
                      "required": [
                        "userAgentVersion"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        ],
        "anyOf": [
          {
            "required": [
              "userAgentBuildVersion"
            ]
          },
          {
            "required": [
              "userAgentVersion"
            ]
          },
          {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "userAgentBuildVersion"
                  ]
                },
                {
                  "required": [
                    "userAgentVersion"
                  ]
                }
              ]
            }
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "description": "An opaque node identifier for the Envoy node. This also provides the local\n service node name. It should be set if any of the following features are\n used: :ref:`statsd \u003carch_overview_statistics\u003e`, :ref:`CDS\n \u003cconfig_cluster_manager_cds\u003e`, and :ref:`HTTP tracing\n \u003carch_overview_tracing\u003e`, either in this message or via\n :option:`--service-node`."
          },
          "cluster": {
            "type": "string",
            "title": "cluster",
            "description": "Defines the local service cluster name where Envoy is running. Though\n optional, it should be set if any of the following features are used:\n :ref:`statsd \u003carch_overview_statistics\u003e`, :ref:`health check cluster\n verification\n \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.service_name_matcher\u003e`,\n :ref:`runtime override directory \u003cenvoy_v3_api_msg_config.bootstrap.v3.Runtime\u003e`,\n :ref:`user agent addition\n \u003cenvoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.add_user_agent\u003e`,\n :ref:`HTTP global rate limiting \u003cconfig_http_filters_rate_limit\u003e`,\n :ref:`CDS \u003cconfig_cluster_manager_cds\u003e`, and :ref:`HTTP tracing\n \u003carch_overview_tracing\u003e`, either in this message or via\n :option:`--service-cluster`."
          },
          "metadata": {
            "allOf": [
              {
                "title": "metadata",
                "description": "Opaque metadata extending the node identifier. Envoy will pass this\n directly to the management server."
              },
              {
                "$ref": "#/components/schemas/google.protobuf.Struct"
              }
            ]
          },
          "dynamicParameters": {
            "type": "object",
            "title": "dynamic_parameters",
            "additionalProperties": {
              "allOf": [
                {
                  "title": "value"
                },
                {
                  "$ref": "#/components/schemas/xds.core.v3.ContextParams"
                }
              ]
            },
            "description": "Map from xDS resource type URL to dynamic context parameters. These may vary at runtime (unlike\n other fields in this message). For example, the xDS client may have a shard identifier that\n changes during the lifetime of the xDS client. In Envoy, this would be achieved by updating the\n dynamic context on the Server::Instance's LocalInfo context provider. The shard ID dynamic\n parameter then appears in this field during future discovery requests."
          },
          "locality": {
            "allOf": [
              {
                "title": "locality",
                "description": "Locality specifying where the Envoy instance is running."
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.Locality"
              }
            ]
          },
          "userAgentName": {
            "type": "string",
            "title": "user_agent_name",
            "description": "Free-form string that identifies the entity requesting config.\n E.g. \"envoy\" or \"grpc\""
          },
          "userAgentVersion": {
            "type": "string",
            "title": "user_agent_version",
            "description": "Free-form string that identifies the version of the entity requesting config.\n E.g. \"1.12.2\" or \"abcd1234\", or \"SpecialEnvoyBuild\""
          },
          "userAgentBuildVersion": {
            "allOf": [
              {
                "title": "user_agent_build_version",
                "description": "Structured version of the entity requesting config."
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.BuildVersion"
              }
            ]
          },
          "extensions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/envoy.config.core.v3.Extension"
            },
            "title": "extensions",
            "description": "List of extensions and their versions supported by the node."
          },
          "clientFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "client_features",
            "description": "Client feature support list. These are well known features described\n in the Envoy API repository for a given major version of an API. Client features\n use reverse DNS naming scheme, for example ``com.acme.feature``.\n See :ref:`the list of features \u003cclient_features\u003e` that xDS client may\n support."
          },
          "listeningAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/envoy.config.core.v3.Address"
            },
            "title": "listening_addresses",
            "description": "Known listening ports on the node as a generic hint to the management server\n for filtering :ref:`listeners \u003cconfig_listeners\u003e` to be returned. For example,\n if there is a listener bound to port 80, the list can optionally contain the\n SocketAddress ``(0.0.0.0,80)``. The field is optional and just a hint."
          }
        },
        "title": "Node",
        "additionalProperties": false,
        "description": "Identifies a specific Envoy instance. The node identifier is presented to the\n management server, which may use this identifier to distinguish per Envoy\n configuration for serving.\n [#next-free-field: 13]"
      },
      "envoy.config.core.v3.Node.DynamicParametersEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "allOf": [
              {
                "title": "value"
              },
              {
                "$ref": "#/components/schemas/xds.core.v3.ContextParams"
              }
            ]
          }
        },
        "title": "DynamicParametersEntry",
        "additionalProperties": false
      },
      "envoy.config.core.v3.Pipe": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "title": "path",
            "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the\n abstract namespace. The starting '@' is replaced by a null byte by Envoy.\n Paths starting with '@' will result in an error in environments other than\n Linux."
          },
          "mode": {
            "type": "integer",
            "title": "mode",
            "description": "The mode for the Pipe. Not applicable for abstract sockets."
          }
        },
        "title": "Pipe",
        "additionalProperties": false
      },
      "envoy.config.core.v3.SocketAddress": {
        "type": "object",
        "allOf": [
          {
            "anyOf": [
              {
                "required": [
                  "namedPort"
                ]
              },
              {
                "required": [
                  "portValue"
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "required": [
                        "namedPort"
                      ]
                    },
                    {
                      "required": [
                        "portValue"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        ],
        "anyOf": [
          {
            "required": [
              "namedPort"
            ]
          },
          {
            "required": [
              "portValue"
            ]
          },
          {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "namedPort"
                  ]
                },
                {
                  "required": [
                    "portValue"
                  ]
                }
              ]
            }
          }
        ],
        "properties": {
          "protocol": {
            "allOf": [
              {
                "title": "protocol"
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.SocketAddress.Protocol"
              }
            ]
          },
          "address": {
            "type": "string",
            "title": "address",
            "description": "The address for this socket. :ref:`Listeners \u003cconfig_listeners\u003e` will bind\n to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``\n to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:\n It is possible to distinguish a Listener address via the prefix/suffix matching\n in :ref:`FilterChainMatch \u003cenvoy_v3_api_msg_config.listener.v3.FilterChainMatch\u003e`.] When used\n within an upstream :ref:`BindConfig \u003cenvoy_v3_api_msg_config.core.v3.BindConfig\u003e`, the address\n controls the source address of outbound connections. For :ref:`clusters\n \u003cenvoy_v3_api_msg_config.cluster.v3.Cluster\u003e`, the cluster type determines whether the\n address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS\n (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized\n via :ref:`resolver_name \u003cenvoy_v3_api_field_config.core.v3.SocketAddress.resolver_name\u003e`."
          },
          "portValue": {
            "type": "integer",
            "title": "port_value"
          },
          "namedPort": {
            "type": "string",
            "title": "named_port",
            "description": "This is only valid if :ref:`resolver_name\n \u003cenvoy_v3_api_field_config.core.v3.SocketAddress.resolver_name\u003e` is specified below and the\n named resolver is capable of named port resolution."
          },
          "resolverName": {
            "type": "string",
            "title": "resolver_name",
            "description": "The name of the custom resolver. This must have been registered with Envoy. If\n this is empty, a context dependent default applies. If the address is a concrete\n IP address, no resolution will occur. If address is a hostname this\n should be set for resolution other than DNS. Specifying a custom resolver with\n ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime."
          },
          "ipv4Compat": {
            "type": "boolean",
            "title": "ipv4_compat",
            "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility\n \u003chttps://tools.ietf.org/html/rfc3493#page-11\u003e`_. Binding to ``::`` will\n allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into\n IPv6 space as ``::FFFF:\u003cIPv4-address\u003e``."
          }
        },
        "title": "SocketAddress",
        "additionalProperties": false,
        "description": "[#next-free-field: 7]"
      },
      "envoy.service.discovery.v3.DeltaDiscoveryRequest": {
        "type": "object",
        "properties": {
          "node": {
            "allOf": [
              {
                "title": "node",
                "description": "The node making the request."
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.Node"
              }
            ]
          },
          "typeUrl": {
            "type": "string",
            "title": "type_url",
            "description": "Type of the resource that is being requested, e.g.\n ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if\n resources are only referenced via ``xds_resource_subscribe`` and\n ``xds_resources_unsubscribe``."
          },
          "resourceNamesSubscribe": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "resource_names_subscribe",
            "description": "DeltaDiscoveryRequests allow the client to add or remove individual\n resources to the set of tracked resources in the context of a stream.\n All resource names in the resource_names_subscribe list are added to the\n set of tracked resources and all resource names in the resource_names_unsubscribe\n list are removed from the set of tracked resources.\n\n *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or\n resource_names_unsubscribe list simply means that no resources are to be\n added or removed to the resource list.\n *Like* state-of-the-world xDS, the server must send updates for all tracked\n resources, but can also send updates for resources the client has not subscribed to.\n\n NOTE: the server must respond with all resources listed in resource_names_subscribe,\n even if it believes the client has the most recent version of them. The reason:\n the client may have dropped them, but then regained interest before it had a chance\n to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.\n\n These two fields can be set in any DeltaDiscoveryRequest, including ACKs\n and initial_resource_versions.\n\n A list of Resource names to add to the list of tracked resources."
          },
          "resourceNamesUnsubscribe": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "resource_names_unsubscribe",
            "description": "A list of Resource names to remove from the list of tracked resources."
          },
          "resourceLocatorsSubscribe": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/envoy.service.discovery.v3.ResourceLocator"
            },
            "title": "resource_locators_subscribe",
            "description": "[#not-implemented-hide:]\n Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters\n along with each resource name.\n Note that it is legal for a request to have some resources listed\n in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``."
          },
          "resourceLocatorsUnsubscribe": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/envoy.service.discovery.v3.ResourceLocator"
            },
            "title": "resource_locators_unsubscribe",
            "description": "[#not-implemented-hide:]\n Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters\n along with each resource name.\n Note that it is legal for a request to have some resources listed\n in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``."
          },
          "initialResourceVersions": {
            "type": "object",
            "title": "initial_resource_versions",
            "additionalProperties": {
              "type": "string",
              "title": "value"
            },
            "description": "Informs the server of the versions of the resources the xDS client knows of, to enable the\n client to continue the same logical xDS session even in the face of gRPC stream reconnection.\n It will not be populated: [1] in the very first stream of a session, since the client will\n not yet have any resources,  [2] in any message after the first in a stream (for a given\n type_url), since the server will already be correctly tracking the client's state.\n (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)\n The map's keys are names of xDS resources known to the xDS client.\n The map's values are opaque resource versions."
          },
          "responseNonce": {
            "type": "string",
            "title": "response_nonce",
            "description": "When the DeltaDiscoveryRequest is a ACK or NACK message in response\n to a previous DeltaDiscoveryResponse, the response_nonce must be the\n nonce in the DeltaDiscoveryResponse.\n Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted."
          },
          "errorDetail": {
            "allOf": [
              {
                "title": "error_detail",
                "description": "This is populated when the previous :ref:`DiscoveryResponse \u003cenvoy_v3_api_msg_service.discovery.v3.DiscoveryResponse\u003e`\n failed to update configuration. The ``message`` field in ``error_details``\n provides the Envoy internal exception related to the failure."
              },
              {
                "$ref": "#/components/schemas/google.rpc.Status"
              }
            ]
          }
        },
        "title": "DeltaDiscoveryRequest",
        "additionalProperties": false,
        "description": "DeltaDiscoveryRequest and DeltaDiscoveryResponse are used in a new gRPC\n endpoint for Delta xDS.\n\n With Delta xDS, the DeltaDiscoveryResponses do not need to include a full\n snapshot of the tracked resources. Instead, DeltaDiscoveryResponses are a\n diff to the state of a xDS client.\n In Delta XDS there are per-resource versions, which allow tracking state at\n the resource granularity.\n An xDS Delta session is always in the context of a gRPC bidirectional\n stream. This allows the xDS server to keep track of the state of xDS clients\n connected to it.\n\n In Delta xDS the nonce field is required and used to pair\n DeltaDiscoveryResponse to a DeltaDiscoveryRequest ACK or NACK.\n Optionally, a response message level system_version_info is present for\n debugging purposes only.\n\n DeltaDiscoveryRequest plays two independent roles. Any DeltaDiscoveryRequest\n can be either or both of: [1] informing the server of what resources the\n client has gained/lost interest in (using resource_names_subscribe and\n resource_names_unsubscribe), or [2] (N)ACKing an earlier resource update from\n the server (using response_nonce, with presence of error_detail making it a NACK).\n Additionally, the first message (for a given type_url) of a reconnected gRPC stream\n has a third role: informing the server of the resources (and their versions)\n that the client already possesses, using the initial_resource_versions field.\n\n As with state-of-the-world, when multiple resource types are multiplexed (ADS),\n all requests/acknowledgments/updates are logically walled off by type_url:\n a Cluster ACK exists in a completely separate world from a prior Route NACK.\n In particular, initial_resource_versions being sent at the \"start\" of every\n gRPC stream actually entails a message for each type_url, each with its own\n initial_resource_versions.\n [#next-free-field: 10]"
      },
      "envoy.service.discovery.v3.DeltaDiscoveryRequest.InitialResourceVersionsEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "type": "string",
            "title": "value"
          }
        },
        "title": "InitialResourceVersionsEntry",
        "additionalProperties": false
      },
      "envoy.service.discovery.v3.DeltaDiscoveryResponse": {
        "type": "object",
        "properties": {
          "systemVersionInfo": {
            "type": "string",
            "title": "system_version_info",
            "description": "The version of the response data (used for debugging)."
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/envoy.service.discovery.v3.Resource"
            },
            "title": "resources",
            "description": "The response resources. These are typed resources, whose types must match\n the type_url field."
          },
          "typeUrl": {
            "type": "string",
            "title": "type_url",
            "description": "Type URL for resources. Identifies the xDS API when muxing over ADS.\n Must be consistent with the type_url in the Any within 'resources' if 'resources' is non-empty."
          },
          "removedResources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "removed_resources",
            "description": "Resources names of resources that have be deleted and to be removed from the xDS Client.\n Removed resources for missing resources can be ignored."
          },
          "removedResourceNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/envoy.service.discovery.v3.ResourceName"
            },
            "title": "removed_resource_names",
            "description": "Alternative to removed_resources that allows specifying which variant of\n a resource is being removed. This variant must be used for any resource\n for which dynamic parameter constraints were sent to the client."
          },
          "nonce": {
            "type": "string",
            "title": "nonce",
            "description": "The nonce provides a way for DeltaDiscoveryRequests to uniquely\n reference a DeltaDiscoveryResponse when (N)ACKing. The nonce is required."
          },
          "controlPlane": {
            "allOf": [
              {
                "title": "control_plane",
                "description": "[#not-implemented-hide:]\n The control plane instance that sent the response."
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.ControlPlane"
              }
            ]
          }
        },
        "title": "DeltaDiscoveryResponse",
        "additionalProperties": false,
        "description": "[#next-free-field: 9]"
      },
      "envoy.service.discovery.v3.DiscoveryRequest": {
        "type": "object",
        "properties": {
          "versionInfo": {
            "type": "string",
            "title": "version_info",
            "description": "The version_info provided in the request messages will be the version_info\n received with the most recent successfully processed response or empty on\n the first request. It is expected that no new request is sent after a\n response is received until the Envoy instance is ready to ACK/NACK the new\n configuration. ACK/NACK takes place by returning the new API config version\n as applied or the previous API config version respectively. Each type_url\n (see below) has an independent version associated with it."
          },
          "node": {
            "allOf": [
              {
                "title": "node",
                "description": "The node making the request."
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.Node"
              }
            ]
          },
          "resourceNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "resource_names",
            "description": "List of resources to subscribe to, e.g. list of cluster names or a route\n configuration name. If this is empty, all resources for the API are\n returned. LDS/CDS may have empty resource_names, which will cause all\n resources for the Envoy instance to be returned. The LDS and CDS responses\n will then imply a number of resources that need to be fetched via EDS/RDS,\n which will be explicitly enumerated in resource_names."
          },
          "resourceLocators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/envoy.service.discovery.v3.ResourceLocator"
            },
            "title": "resource_locators",
            "description": "[#not-implemented-hide:]\n Alternative to ``resource_names`` field that allows specifying dynamic\n parameters along with each resource name. Clients that populate this\n field must be able to handle responses from the server where resources\n are wrapped in a Resource message.\n Note that it is legal for a request to have some resources listed\n in ``resource_names`` and others in ``resource_locators``."
          },
          "typeUrl": {
            "type": "string",
            "title": "type_url",
            "description": "Type of the resource that is being requested, e.g.\n \"type.googleapis.com/envoy.api.v2.ClusterLoadAssignment\". This is implicit\n in requests made via singleton xDS APIs such as CDS, LDS, etc. but is\n required for ADS."
          },
          "responseNonce": {
            "type": "string",
            "title": "response_nonce",
            "description": "nonce corresponding to DiscoveryResponse being ACK/NACKed. See above\n discussion on version_info and the DiscoveryResponse nonce comment. This\n may be empty only if 1) this is a non-persistent-stream xDS such as HTTP,\n or 2) the client has not yet accepted an update in this xDS stream (unlike\n delta, where it is populated only for new explicit ACKs)."
          },
          "errorDetail": {
            "allOf": [
              {
                "title": "error_detail",
                "description": "This is populated when the previous :ref:`DiscoveryResponse \u003cenvoy_v3_api_msg_service.discovery.v3.DiscoveryResponse\u003e`\n failed to update configuration. The ``message`` field in ``error_details`` provides the Envoy\n internal exception related to the failure. It is only intended for consumption during manual\n debugging, the string provided is not guaranteed to be stable across Envoy versions."
              },
              {
                "$ref": "#/components/schemas/google.rpc.Status"
              }
            ]
          }
        },
        "title": "DiscoveryRequest",
        "additionalProperties": false,
        "description": "A DiscoveryRequest requests a set of versioned resources of the same type for\n a given Envoy node on some API.\n [#next-free-field: 8]"
      },
      "envoy.service.discovery.v3.DiscoveryResponse": {
        "type": "object",
        "properties": {
          "versionInfo": {
            "type": "string",
            "title": "version_info",
            "description": "The version of the response data."
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "title": "resources",
            "description": "The response resources. These resources are typed and depend on the API being called."
          },
          "canary": {
            "type": "boolean",
            "title": "canary",
            "description": "[#not-implemented-hide:]\n Canary is used to support two Envoy command line flags:\n\n * --terminate-on-canary-transition-failure. When set, Envoy is able to\n   terminate if it detects that configuration is stuck at canary. Consider\n   this example sequence of updates:\n   - Management server applies a canary config successfully.\n   - Management server rolls back to a production config.\n   - Envoy rejects the new production config.\n   Since there is no sensible way to continue receiving configuration\n   updates, Envoy will then terminate and apply production config from a\n   clean slate.\n * --dry-run-canary. When set, a canary response will never be applied, only\n   validated via a dry run."
          },
          "typeUrl": {
            "type": "string",
            "title": "type_url",
            "description": "Type URL for resources. Identifies the xDS API when muxing over ADS.\n Must be consistent with the type_url in the 'resources' repeated Any (if non-empty)."
          },
          "nonce": {
            "type": "string",
            "title": "nonce",
            "description": "For gRPC based subscriptions, the nonce provides a way to explicitly ack a\n specific DiscoveryResponse in a following DiscoveryRequest. Additional\n messages may have been sent by Envoy to the management server for the\n previous version on the stream prior to this DiscoveryResponse, that were\n unprocessed at response send time. The nonce allows the management server\n to ignore any further DiscoveryRequests for the previous version until a\n DiscoveryRequest bearing the nonce. The nonce is optional and is not\n required for non-stream based xDS implementations."
          },
          "controlPlane": {
            "allOf": [
              {
                "title": "control_plane",
                "description": "The control plane instance that sent the response."
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.ControlPlane"
              }
            ]
          }
        },
        "title": "DiscoveryResponse",
        "additionalProperties": false,
        "description": "[#next-free-field: 7]"
      },
      "envoy.service.discovery.v3.DynamicParameterConstraints": {
        "type": "object",
        "allOf": [
          {
            "anyOf": [
              {
                "required": [
                  "andConstraints"
                ]
              },
              {
                "required": [
                  "constraint"
                ]
              },
              {
                "required": [
                  "notConstraints"
                ]
              },
              {
                "required": [
                  "orConstraints"
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "required": [
                        "andConstraints"
                      ]
                    },
                    {
                      "required": [
                        "constraint"
                      ]
                    },
                    {
                      "required": [
                        "notConstraints"
                      ]
                    },
                    {
                      "required": [
                        "orConstraints"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        ],
        "anyOf": [
          {
            "required": [
              "andConstraints"
            ]
          },
          {
            "required": [
              "constraint"
            ]
          },
          {
            "required": [
              "notConstraints"
            ]
          },
          {
            "required": [
              "orConstraints"
            ]
          },
          {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "andConstraints"
                  ]
                },
                {
                  "required": [
                    "constraint"
                  ]
                },
                {
                  "required": [
                    "notConstraints"
                  ]
                },
                {
                  "required": [
                    "orConstraints"
                  ]
                }
              ]
            }
          }
        ],
        "properties": {
          "constraint": {
            "allOf": [
              {
                "title": "constraint",
                "description": "A single constraint to evaluate."
              },
              {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DynamicParameterConstraints.SingleConstraint"
              }
            ]
          },
          "orConstraints": {
            "allOf": [
              {
                "title": "or_constraints",
                "description": "A list of constraints that match if any one constraint in the list\n matches."
              },
              {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DynamicParameterConstraints.ConstraintList"
              }
            ]
          },
          "andConstraints": {
            "allOf": [
              {
                "title": "and_constraints",
                "description": "A list of constraints that must all match."
              },
              {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DynamicParameterConstraints.ConstraintList"
              }
            ]
          },
          "notConstraints": {
            "allOf": [
              {
                "title": "not_constraints",
                "description": "The inverse (NOT) of a set of constraints."
              },
              {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DynamicParameterConstraints"
              }
            ]
          }
        },
        "title": "DynamicParameterConstraints",
        "additionalProperties": false,
        "description": "A set of dynamic parameter constraints associated with a variant of an individual xDS resource.\n These constraints determine whether the resource matches a subscription based on the set of\n dynamic parameters in the subscription, as specified in the\n :ref:`ResourceLocator.dynamic_parameters\u003cenvoy_v3_api_field_service.discovery.v3.ResourceLocator.dynamic_parameters\u003e`\n field. This allows xDS implementations (clients, servers, and caching proxies) to determine\n which variant of a resource is appropriate for a given client."
      },
      "envoy.service.discovery.v3.DynamicParameterConstraints.ConstraintList": {
        "type": "object",
        "properties": {
          "constraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/envoy.service.discovery.v3.DynamicParameterConstraints"
            },
            "title": "constraints"
          }
        },
        "title": "ConstraintList",
        "additionalProperties": false
      },
      "envoy.service.discovery.v3.DynamicParameterConstraints.SingleConstraint": {
        "type": "object",
        "allOf": [
          {
            "anyOf": [
              {
                "required": [
                  "exists"
                ]
              },
              {
                "required": [
                  "value"
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "required": [
                        "exists"
                      ]
                    },
                    {
                      "required": [
                        "value"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        ],
        "anyOf": [
          {
            "required": [
              "exists"
            ]
          },
          {
            "required": [
              "value"
            ]
          },
          {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "exists"
                  ]
                },
                {
                  "required": [
                    "value"
                  ]
                }
              ]
            }
          }
        ],
        "properties": {
          "key": {
            "type": "string",
            "title": "key",
            "description": "The key to match against."
          },
          "value": {
            "type": "string",
            "title": "value",
            "description": "Matches this exact value."
          },
          "exists": {
            "allOf": [
              {
                "title": "exists",
                "description": "Key is present (matches any value except for the key being absent).\n This allows setting a default constraint for clients that do\n not send a key at all, while there may be other clients that need\n special configuration based on that key."
              },
              {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DynamicParameterConstraints.SingleConstraint.Exists"
              }
            ]
          }
        },
        "title": "SingleConstraint",
        "additionalProperties": false,
        "description": "A single constraint for a given key."
      },
      "envoy.service.discovery.v3.DynamicParameterConstraints.SingleConstraint.Exists": {
        "type": "object",
        "title": "Exists",
        "additionalProperties": false
      },
      "envoy.service.discovery.v3.Resource": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "description": "The resource's name, to distinguish it from others of the same type of resource.\n Only one of ``name`` or ``resource_name`` may be set."
          },
          "resourceName": {
            "allOf": [
              {
                "title": "resource_name",
                "description": "Alternative to the ``name`` field, to be used when the server supports\n multiple variants of the named resource that are differentiated by\n dynamic parameter constraints.\n Only one of ``name`` or ``resource_name`` may be set."
              },
              {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.ResourceName"
              }
            ]
          },
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "aliases",
            "description": "The aliases are a list of other names that this resource can go by."
          },
          "version": {
            "type": "string",
            "title": "version",
            "description": "The resource level version. It allows xDS to track the state of individual\n resources."
          },
          "resource": {
            "allOf": [
              {
                "title": "resource",
                "description": "The resource being tracked."
              },
              {
                "$ref": "#/components/schemas/google.protobuf.Any"
              }
            ]
          },
          "ttl": {
            "allOf": [
              {
                "title": "ttl",
                "description": "Time-to-live value for the resource. For each resource, a timer is started. The timer is\n reset each time the resource is received with a new TTL. If the resource is received with\n no TTL set, the timer is removed for the resource. Upon expiration of the timer, the\n configuration for the resource will be removed.\n\n The TTL can be refreshed or changed by sending a response that doesn't change the resource\n version. In this case the resource field does not need to be populated, which allows for\n light-weight \"heartbeat\" updates to keep a resource with a TTL alive.\n\n The TTL feature is meant to support configurations that should be removed in the event of\n a management server failure. For example, the feature may be used for fault injection\n testing where the fault injection should be terminated in the event that Envoy loses contact\n with the management server."
              },
              {
                "$ref": "#/components/schemas/google.protobuf.Duration"
              }
            ]
          },
          "cacheControl": {
            "allOf": [
              {
                "title": "cache_control",
                "description": "Cache control properties for the resource.\n [#not-implemented-hide:]"
              },
              {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.Resource.CacheControl"
              }
            ]
          },
          "metadata": {
            "allOf": [
              {
                "title": "metadata",
                "description": "The Metadata field can be used to provide additional information for the resource.\n E.g. the trace data for debugging."
              },
              {
                "$ref": "#/components/schemas/envoy.config.core.v3.Metadata"
              }
            ]
          }
        },
        "title": "Resource",
        "additionalProperties": false,
        "description": "[#next-free-field: 10]"
      },
      "envoy.service.discovery.v3.Resource.CacheControl": {
        "type": "object",
        "properties": {
          "doNotCache": {
            "type": "boolean",
            "title": "do_not_cache",
            "description": "If true, xDS proxies may not cache this resource.\n Note that this does not apply to clients other than xDS proxies, which must cache resources\n for their own use, regardless of the value of this field."
          }
        },
        "title": "CacheControl",
        "additionalProperties": false,
        "description": "Cache control properties for the resource.\n [#not-implemented-hide:]"
      },
      "envoy.service.discovery.v3.ResourceLocator": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "description": "The resource name to subscribe to."
          },
          "dynamicParameters": {
            "type": "object",
            "title": "dynamic_parameters",
            "additionalProperties": {
              "type": "string",
              "title": "value"
            },
            "description": "A set of dynamic parameters used to match against the dynamic parameter\n constraints on the resource. This allows clients to select between\n multiple variants of the same resource."
          }
        },
        "title": "ResourceLocator",
        "additionalProperties": false,
        "description": "Specifies a resource to be subscribed to."
      },
      "envoy.service.discovery.v3.ResourceLocator.DynamicParametersEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "type": "string",
            "title": "value"
          }
        },
        "title": "DynamicParametersEntry",
        "additionalProperties": false
      },
      "envoy.service.discovery.v3.ResourceName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "description": "The name of the resource."
          },
          "dynamicParameterConstraints": {
            "allOf": [
              {
                "title": "dynamic_parameter_constraints",
                "description": "Dynamic parameter constraints associated with this resource. To be used by client-side caches\n (including xDS proxies) when matching subscribed resource locators."
              },
              {
                "$ref": "#/components/schemas/envoy.service.discovery.v3.DynamicParameterConstraints"
              }
            ]
          }
        },
        "title": "ResourceName",
        "additionalProperties": false,
        "description": "Specifies a concrete resource name."
      },
      "envoy.type.v3.SemanticVersion": {
        "type": "object",
        "properties": {
          "majorNumber": {
            "type": "integer",
            "title": "major_number"
          },
          "minorNumber": {
            "type": "integer",
            "title": "minor_number"
          },
          "patch": {
            "type": "integer",
            "title": "patch"
          }
        },
        "title": "SemanticVersion",
        "additionalProperties": false,
        "description": "Envoy uses SemVer (https://semver.org/). Major/minor versions indicate\n expected behaviors and APIs, the patch version field is used only\n for security fixes and can be generally ignored."
      },
      "google.protobuf.Any": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "format": "binary"
          },
          "debug": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."
      },
      "google.protobuf.Duration": {
        "type": "string",
        "pattern": "^[-\\+]?([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
        "format": "regex",
        "description": "A Duration represents a signed, fixed-length span of time represented\n as a count of seconds and fractions of seconds at nanosecond\n resolution. It is independent of any calendar and concepts like \"day\"\n or \"month\". It is related to Timestamp in that the difference between\n two Timestamp values is a Duration and it can be added or subtracted\n from a Timestamp. Range is approximately +-10,000 years.\n\n # Examples\n\n Example 1: Compute Duration from two Timestamps in pseudo code.\n\n     Timestamp start = ...;\n     Timestamp end = ...;\n     Duration duration = ...;\n\n     duration.seconds = end.seconds - start.seconds;\n     duration.nanos = end.nanos - start.nanos;\n\n     if (duration.seconds \u003c 0 \u0026\u0026 duration.nanos \u003e 0) {\n       duration.seconds += 1;\n       duration.nanos -= 1000000000;\n     } else if (duration.seconds \u003e 0 \u0026\u0026 duration.nanos \u003c 0) {\n       duration.seconds -= 1;\n       duration.nanos += 1000000000;\n     }\n\n Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n\n     Timestamp start = ...;\n     Duration duration = ...;\n     Timestamp end = ...;\n\n     end.seconds = start.seconds + duration.seconds;\n     end.nanos = start.nanos + duration.nanos;\n\n     if (end.nanos \u003c 0) {\n       end.seconds -= 1;\n       end.nanos += 1000000000;\n     } else if (end.nanos \u003e= 1000000000) {\n       end.seconds += 1;\n       end.nanos -= 1000000000;\n     }\n\n Example 3: Compute Duration from datetime.timedelta in Python.\n\n     td = datetime.timedelta(days=3, minutes=10)\n     duration = Duration()\n     duration.FromTimedelta(td)\n\n # JSON Mapping\n\n In JSON format, the Duration type is encoded as a string rather than an\n object, where the string ends in the suffix \"s\" (indicating seconds) and\n is preceded by the number of seconds, with nanoseconds expressed as\n fractional seconds. For example, 3 seconds with 0 nanoseconds should be\n encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\n be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\n microsecond should be expressed in JSON format as \"3.000001s\"."
      },
      "google.protobuf.ListValue": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Value"
            },
            "title": "values",
            "description": "Repeated field of dynamically typed values."
          }
        },
        "title": "ListValue",
        "additionalProperties": false,
        "description": "`ListValue` is a wrapper around a repeated field of values.\n\n The JSON representation for `ListValue` is JSON array."
      },
      "google.protobuf.Struct": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "title": "fields",
            "additionalProperties": {
              "allOf": [
                {
                  "title": "value"
                },
                {
                  "$ref": "#/components/schemas/google.protobuf.Value"
                }
              ]
            },
            "description": "Unordered map of dynamically typed values."
          }
        },
        "title": "Struct",
        "additionalProperties": false,
        "description": "`Struct` represents a structured data value, consisting of fields\n which map to dynamically typed values. In some languages, `Struct`\n might be supported by a native representation. For example, in\n scripting languages like JS a struct is represented as an\n object. The details of that representation are described together\n with the proto support for the language.\n\n The JSON representation for `Struct` is JSON object."
      },
      "google.protobuf.Struct.FieldsEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "allOf": [
              {
                "title": "value"
              },
              {
                "$ref": "#/components/schemas/google.protobuf.Value"
              }
            ]
          }
        },
        "title": "FieldsEntry",
        "additionalProperties": false
      },
      "google.protobuf.Value": {
        "oneOf": [
          {
            "type": "null"
          },
          {
            "type": "number"
          },
          {
            "type": "string"
          },
          {
            "type": "boolean"
          },
          {
            "type": "array"
          },
          {
            "type": "object",
            "additionalProperties": true
          }
        ],
        "description": "`Value` represents a dynamically typed value which can be either\n null, a number, a string, a boolean, a recursive struct value, or a\n list of values. A producer of value is expected to set one of these\n variants. Absence of any variant indicates an error.\n\n The JSON representation for `Value` is JSON value."
      },
      "google.rpc.Status": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "title": "code",
            "format": "int32",
            "description": "The status code, which should be an enum value of\n [google.rpc.Code][google.rpc.Code]."
          },
          "message": {
            "type": "string",
            "title": "message",
            "description": "A developer-facing error message, which should be in English. Any\n user-facing error message should be localized and sent in the\n [google.rpc.Status.details][google.rpc.Status.details] field, or localized\n by the client."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "title": "details",
            "description": "A list of messages that carry the error details.  There is a common set of\n message types for APIs to use."
          }
        },
        "title": "Status",
        "additionalProperties": false,
        "description": "The `Status` type defines a logical error model that is suitable for\n different programming environments, including REST APIs and RPC APIs. It is\n used by [gRPC](https://github.com/grpc). Each `Status` message contains\n three pieces of data: error code, error message, and error details.\n\n You can find out more about this error model and how to work with it in the\n [API Design Guide](https://cloud.google.com/apis/design/errors)."
      },
      "xds.core.v3.ContextParams": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "title": "params",
            "additionalProperties": {
              "type": "string",
              "title": "value"
            }
          }
        },
        "title": "ContextParams",
        "additionalProperties": false,
        "description": "Additional parameters that can be used to select resource variants. These include any\n global context parameters, per-resource type client feature capabilities and per-resource\n type functional attributes. All per-resource type attributes will be `xds.resource.`\n prefixed and some of these are documented below:\n\n `xds.resource.listening_address`: The value is \"IP:port\" (e.g. \"10.1.1.3:8080\") which is\n   the listening address of a Listener. Used in a Listener resource query."
      },
      "xds.core.v3.ContextParams.ParamsEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "type": "string",
            "title": "value"
          }
        },
        "title": "ParamsEntry",
        "additionalProperties": false
      },
      "connect-protocol-version": {
        "type": "number",
        "title": "Connect-Protocol-Version",
        "enum": [
          1
        ],
        "description": "Define the version of the Connect protocol",
        "const": 1
      },
      "connect-timeout-header": {
        "type": "number",
        "title": "Connect-Timeout-Ms",
        "description": "Define the timeout, in ms"
      },
      "connect.error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "examples": [
              "CodeNotFound"
            ],
            "enum": [
              "CodeCanceled",
              "CodeUnknown",
              "CodeInvalidArgument",
              "CodeDeadlineExceeded",
              "CodeNotFound",
              "CodeAlreadyExists",
              "CodePermissionDenied",
              "CodeResourceExhausted",
              "CodeFailedPrecondition",
              "CodeAborted",
              "CodeOutOfRange",
              "CodeInternal",
              "CodeUnavailable",
              "CodeDataLoss",
              "CodeUnauthenticated"
            ],
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          },
          "message": {
            "type": "string",
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
          },
          "detail": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "title": "Connect Error",
        "additionalProperties": true,
        "description": "Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation"
      }
    }
  },
  "security": [],
  "tags": [
    {
      "name": "envoy.test.ClusterDiscoveryService"
    }
  ]
}