{
  "openapi": "3.1.0",
  "info": {
    "title": "protovalidate",
    "description": "## protovalidate.MessageFields\n\n## protovalidate.FieldsService"
  },
  "paths": {
    "/protovalidate.MessageFields/OneOfRPC": {
      "post": {
        "tags": [
          "protovalidate.MessageFields"
        ],
        "summary": "OneOfRPC",
        "operationId": "protovalidate.MessageFields.OneOfRPC",
        "parameters": [
          {
            "name": "Connect-Protocol-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/connect-protocol-version"
            }
          },
          {
            "name": "Connect-Timeout-Ms",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/connect-timeout-header"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/protovalidate.OneOfMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.protobuf.Empty"
                }
              }
            }
          }
        }
      }
    },
    "/protovalidate.MessageFields/CELRPC": {
      "post": {
        "tags": [
          "protovalidate.MessageFields"
        ],
        "summary": "CELRPC",
        "operationId": "protovalidate.MessageFields.CELRPC",
        "parameters": [
          {
            "name": "Connect-Protocol-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/connect-protocol-version"
            }
          },
          {
            "name": "Connect-Timeout-Ms",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/connect-timeout-header"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/protovalidate.CELMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.protobuf.Empty"
                }
              }
            }
          }
        }
      }
    },
    "/protovalidate.FieldsService/CELRPC": {
      "post": {
        "tags": [
          "protovalidate.FieldsService"
        ],
        "summary": "CELRPC",
        "operationId": "protovalidate.FieldsService.CELRPC",
        "parameters": [
          {
            "name": "Connect-Protocol-Version",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/connect-protocol-version"
            }
          },
          {
            "name": "Connect-Timeout-Ms",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/connect-timeout-header"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/protovalidate.LotsOfValidationRules"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connect.error"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.protobuf.Empty"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "protovalidate.MyEnum": {
        "type": "string",
        "title": "MyEnum",
        "enum": [
          "MY_ENUM_UNSPECIFIED",
          "MY_ENUM_VALUE1",
          "MY_ENUM_VALUE2"
        ]
      },
      "google.protobuf.Any": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "format": "binary"
          }
        },
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."
      },
      "google.protobuf.Duration": {
        "type": "string",
        "format": "duration",
        "description": "A Duration represents a signed, fixed-length span of time represented\n as a count of seconds and fractions of seconds at nanosecond\n resolution. It is independent of any calendar and concepts like \"day\"\n or \"month\". It is related to Timestamp in that the difference between\n two Timestamp values is a Duration and it can be added or subtracted\n from a Timestamp. Range is approximately +-10,000 years.\n\n # Examples\n\n Example 1: Compute Duration from two Timestamps in pseudo code.\n\n     Timestamp start = ...;\n     Timestamp end = ...;\n     Duration duration = ...;\n\n     duration.seconds = end.seconds - start.seconds;\n     duration.nanos = end.nanos - start.nanos;\n\n     if (duration.seconds \u003c 0 \u0026\u0026 duration.nanos \u003e 0) {\n       duration.seconds += 1;\n       duration.nanos -= 1000000000;\n     } else if (duration.seconds \u003e 0 \u0026\u0026 duration.nanos \u003c 0) {\n       duration.seconds -= 1;\n       duration.nanos += 1000000000;\n     }\n\n Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n\n     Timestamp start = ...;\n     Duration duration = ...;\n     Timestamp end = ...;\n\n     end.seconds = start.seconds + duration.seconds;\n     end.nanos = start.nanos + duration.nanos;\n\n     if (end.nanos \u003c 0) {\n       end.seconds -= 1;\n       end.nanos += 1000000000;\n     } else if (end.nanos \u003e= 1000000000) {\n       end.seconds += 1;\n       end.nanos -= 1000000000;\n     }\n\n Example 3: Compute Duration from datetime.timedelta in Python.\n\n     td = datetime.timedelta(days=3, minutes=10)\n     duration = Duration()\n     duration.FromTimedelta(td)\n\n # JSON Mapping\n\n In JSON format, the Duration type is encoded as a string rather than an\n object, where the string ends in the suffix \"s\" (indicating seconds) and\n is preceded by the number of seconds, with nanoseconds expressed as\n fractional seconds. For example, 3 seconds with 0 nanoseconds should be\n encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\n be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\n microsecond should be expressed in JSON format as \"3.000001s\"."
      },
      "google.protobuf.Empty": {
        "type": "object",
        "description": "A generic empty message that you can re-use to avoid defining duplicated\n empty messages in your APIs. A typical example is to use it as the request\n or the response type of an API method. For instance:\n\n     service Foo {\n       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n     }"
      },
      "google.protobuf.Timestamp": {
        "type": "string",
        "examples": [
          "1s",
          "1.000340012s"
        ],
        "format": "date-time",
        "description": "A Timestamp represents a point in time independent of any time zone or local\n calendar, encoded as a count of seconds and fractions of seconds at\n nanosecond resolution. The count is relative to an epoch at UTC midnight on\n January 1, 1970, in the proleptic Gregorian calendar which extends the\n Gregorian calendar backwards to year one.\n\n All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n second table is needed for interpretation, using a [24-hour linear\n smear](https://developers.google.com/time/smear).\n\n The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n restricting to that range, we ensure that we can convert to and from [RFC\n 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n\n # Examples\n\n Example 1: Compute Timestamp from POSIX `time()`.\n\n     Timestamp timestamp;\n     timestamp.set_seconds(time(NULL));\n     timestamp.set_nanos(0);\n\n Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n\n     struct timeval tv;\n     gettimeofday(\u0026tv, NULL);\n\n     Timestamp timestamp;\n     timestamp.set_seconds(tv.tv_sec);\n     timestamp.set_nanos(tv.tv_usec * 1000);\n\n Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n     FILETIME ft;\n     GetSystemTimeAsFileTime(\u0026ft);\n     UINT64 ticks = (((UINT64)ft.dwHighDateTime) \u003c\u003c 32) | ft.dwLowDateTime;\n\n     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n     Timestamp timestamp;\n     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\n Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\n     long millis = System.currentTimeMillis();\n\n     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n         .setNanos((int) ((millis % 1000) * 1000000)).build();\n\n Example 5: Compute Timestamp from Java `Instant.now()`.\n\n     Instant now = Instant.now();\n\n     Timestamp timestamp =\n         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n             .setNanos(now.getNano()).build();\n\n Example 6: Compute Timestamp from current time in Python.\n\n     timestamp = Timestamp()\n     timestamp.GetCurrentTime()\n\n # JSON Mapping\n\n In JSON format, the Timestamp type is encoded as a string in the\n [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n where {year} is always expressed using four digits while {month}, {day},\n {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n is required. A proto3 JSON serializer should always use UTC (as indicated by\n \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n able to accept both UTC and other timezones (as indicated by an offset).\n\n For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n 01:30 UTC on January 15, 2017.\n\n In JavaScript, one can convert a Date object to this format using the\n standard\n [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n method. In Python, a standard `datetime.datetime` object can be converted\n to this format using\n [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n the Joda Time's [`ISODateTimeFormat.dateTime()`](\n http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n ) to obtain a formatter capable of generating timestamps in this format."
      },
      "protovalidate.CELMessage": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "a": {
                "type": "string",
                "title": "a",
                "minLength": 1,
                "description": "string.min_len = 1\n"
              }
            },
            "title": "a",
            "required": [
              "a"
            ]
          },
          {
            "properties": {
              "b": {
                "type": "string",
                "title": "b"
              }
            },
            "title": "b",
            "required": [
              "b"
            ]
          }
        ],
        "title": "CELMessage",
        "additionalProperties": false
      },
      "protovalidate.LotsOfValidationRules": {
        "type": "object",
        "properties": {
          "celField": {
            "type": "integer",
            "title": "cel_field",
            "format": "int32",
            "description": "my_message.value // value must be greater than 42\n",
            "nullable": true
          },
          "skippedField": {
            "title": "skipped_field",
            "nullable": true,
            "$ref": "#/components/schemas/protovalidate.MyOtherMessage"
          },
          "requiredField": {
            "title": "required_field",
            "nullable": true,
            "$ref": "#/components/schemas/protovalidate.MyOtherMessage"
          },
          "uriField": {
            "type": "string",
            "title": "uri_field",
            "format": "uri",
            "description": "string.uri = true // value must be a valid URI\nstring.uri_empty = true // value is empty, which is not a valid URI\n",
            "nullable": true
          },
          "floatConst": {
            "type": "number",
            "title": "float_const",
            "format": "float",
            "description": "Floats\nfloat.const = 42\n",
            "const": "42"
          },
          "floatIn": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float",
              "description": "float.in = [1, 2, 3]\n"
            },
            "title": "float_in"
          },
          "floatNotIn": {
            "type": "array",
            "items": {
              "type": "number",
              "not": {
                "type": "number",
                "enum": [
                  "1",
                  "2",
                  "3"
                ]
              },
              "format": "float",
              "description": "float.not_in = [1, 2, 3]\n"
            },
            "title": "float_not_in"
          },
          "floatFinite": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float",
              "description": "float.finite = true\n"
            },
            "title": "float_finite"
          },
          "floatLt": {
            "type": "number",
            "title": "float_lt",
            "format": "float",
            "description": "float.lt = 42\n"
          },
          "floatLte": {
            "type": "number",
            "title": "float_lte",
            "format": "float",
            "description": "float.lte = 420\n"
          },
          "floatGt": {
            "type": "number",
            "title": "float_gt",
            "format": "float",
            "description": "float.gt = 6.9\nfloat.gt_lt = 6.9\nfloat.gt_lt_exclusive = 6.9\nfloat.gt_lte = 6.9\nfloat.gt_lte_exclusive = 6.9\n"
          },
          "floatGte": {
            "type": "number",
            "title": "float_gte",
            "format": "float",
            "description": "float.gte = 69\nfloat.gte_lt = 69\nfloat.gte_lt_exclusive = 69\nfloat.gte_lte = 69\nfloat.gte_lte_exclusive = 69\n"
          },
          "floatBounds": {
            "type": "number",
            "title": "float_bounds",
            "format": "float",
            "description": "float.lt = 10\nfloat.gte = 5\nfloat.gte_lt = 5\nfloat.gte_lt_exclusive = 5\nfloat.gte_lte = 5\nfloat.gte_lte_exclusive = 5\n"
          },
          "doubleConst": {
            "type": "number",
            "title": "double_const",
            "format": "double",
            "description": "Double\ndouble.const = 42\n",
            "const": "42"
          },
          "doubleIn": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double",
              "enum": [
                "1",
                "2",
                "3"
              ],
              "description": "double.in = [1, 2, 3]\n"
            },
            "title": "double_in"
          },
          "doubleNotIn": {
            "type": "array",
            "items": {
              "type": "number",
              "not": {
                "type": "number",
                "enum": [
                  "1",
                  "2",
                  "3"
                ]
              },
              "format": "double",
              "description": "double.not_in = [1, 2, 3]\n"
            },
            "title": "double_not_in"
          },
          "doubleFinite": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double",
              "description": "double.finite = true\n"
            },
            "title": "double_finite"
          },
          "doubleLt": {
            "exclusiveMaximum": 42,
            "type": "number",
            "title": "double_lt",
            "format": "double",
            "description": "double.lt = 42\n"
          },
          "doubleLte": {
            "type": "number",
            "title": "double_lte",
            "maximum": 420,
            "format": "double",
            "description": "double.lte = 420\n"
          },
          "doubleGt": {
            "exclusiveMinimum": 6.9,
            "type": "number",
            "title": "double_gt",
            "format": "double",
            "description": "double.gt = 6.9\ndouble.gt_lt = 6.9\ndouble.gt_lt_exclusive = 6.9\ndouble.gt_lte = 6.9\ndouble.gt_lte_exclusive = 6.9\n"
          },
          "doubleGte": {
            "type": "number",
            "title": "double_gte",
            "minimum": 69,
            "format": "double",
            "description": "double.gte = 69\ndouble.gte_lt = 69\ndouble.gte_lt_exclusive = 69\ndouble.gte_lte = 69\ndouble.gte_lte_exclusive = 69\n"
          },
          "doubleBounds": {
            "exclusiveMaximum": 10,
            "type": "number",
            "title": "double_bounds",
            "minimum": 5,
            "format": "double",
            "description": "double.lt = 10\ndouble.gte = 5\ndouble.gte_lt = 5\ndouble.gte_lt_exclusive = 5\ndouble.gte_lte = 5\ndouble.gte_lte_exclusive = 5\n"
          },
          "int32Const": {
            "type": "integer",
            "title": "int32_const",
            "format": "int32",
            "description": "int32\nint32.const = 42\n",
            "const": 42
          },
          "int32In": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "enum": [
                1,
                2,
                3
              ],
              "description": "int32.in = [1, 2, 3]\n"
            },
            "title": "int32_in"
          },
          "int32NotIn": {
            "type": "array",
            "items": {
              "type": "integer",
              "not": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3
                ]
              },
              "format": "int32",
              "description": "int32.not_in = [1, 2, 3]\n"
            },
            "title": "int32_not_in"
          },
          "int32Lt": {
            "exclusiveMaximum": 42,
            "type": "integer",
            "title": "int32_lt",
            "format": "int32",
            "description": "int32.lt = 42\n"
          },
          "int32Lte": {
            "type": "integer",
            "title": "int32_lte",
            "maximum": 420,
            "format": "int32",
            "description": "int32.lte = 420\n"
          },
          "int32Gt": {
            "exclusiveMinimum": 6,
            "type": "integer",
            "title": "int32_gt",
            "format": "int32",
            "description": "int32.gt = 6\nint32.gt_lt = 6\nint32.gt_lt_exclusive = 6\nint32.gt_lte = 6\nint32.gt_lte_exclusive = 6\n"
          },
          "int32Gte": {
            "type": "integer",
            "title": "int32_gte",
            "minimum": 69,
            "format": "int32",
            "description": "int32.gte = 69\nint32.gte_lt = 69\nint32.gte_lt_exclusive = 69\nint32.gte_lte = 69\nint32.gte_lte_exclusive = 69\n"
          },
          "int32Bounds": {
            "exclusiveMaximum": 10,
            "type": "integer",
            "title": "int32_bounds",
            "minimum": 5,
            "format": "int32",
            "description": "int32.lt = 10\nint32.gte = 5\nint32.gte_lt = 5\nint32.gte_lt_exclusive = 5\nint32.gte_lte = 5\nint32.gte_lte_exclusive = 5\n"
          },
          "int64Const": {
            "type": [
              "integer",
              "string"
            ],
            "title": "int64_const",
            "format": "int64",
            "description": "int64\nint64.const = 42\n",
            "const": 42
          },
          "int64In": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "format": "int64",
              "enum": [
                1,
                2,
                3
              ],
              "description": "int64.in = [1, 2, 3]\n"
            },
            "title": "int64_in"
          },
          "int64NotIn": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "not": {
                "type": [
                  "integer",
                  "string"
                ],
                "enum": [
                  1,
                  2,
                  3
                ]
              },
              "format": "int64",
              "description": "int64.not_in = [1, 2, 3]\n"
            },
            "title": "int64_not_in"
          },
          "int64Lt": {
            "exclusiveMaximum": 42,
            "type": [
              "integer",
              "string"
            ],
            "title": "int64_lt",
            "format": "int64",
            "description": "int64.lt = 42\n"
          },
          "int64Lte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "int64_lte",
            "maximum": 420,
            "format": "int64",
            "description": "int64.lte = 420\n"
          },
          "int64Gt": {
            "exclusiveMinimum": 6,
            "type": [
              "integer",
              "string"
            ],
            "title": "int64_gt",
            "format": "int64",
            "description": "int64.gt = 6\nint64.gt_lt = 6\nint64.gt_lt_exclusive = 6\nint64.gt_lte = 6\nint64.gt_lte_exclusive = 6\n"
          },
          "int64Gte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "int64_gte",
            "minimum": 69,
            "format": "int64",
            "description": "int64.gte = 69\nint64.gte_lt = 69\nint64.gte_lt_exclusive = 69\nint64.gte_lte = 69\nint64.gte_lte_exclusive = 69\n"
          },
          "int64Bounds": {
            "exclusiveMaximum": 10,
            "type": [
              "integer",
              "string"
            ],
            "title": "int64_bounds",
            "minimum": 5,
            "format": "int64",
            "description": "int64.lt = 10\nint64.gte = 5\nint64.gte_lt = 5\nint64.gte_lt_exclusive = 5\nint64.gte_lte = 5\nint64.gte_lte_exclusive = 5\n"
          },
          "uint32Const": {
            "type": "integer",
            "title": "uint32_const",
            "description": "uint32\nuint32.const = 42\n",
            "const": "42"
          },
          "uint32In": {
            "type": "array",
            "items": {
              "type": "integer",
              "enum": [
                "1",
                "2",
                "3"
              ],
              "description": "uint32.in = [1, 2, 3]\n"
            },
            "title": "uint32_in"
          },
          "uint32NotIn": {
            "type": "array",
            "items": {
              "type": "integer",
              "not": {
                "type": "integer",
                "enum": [
                  "1",
                  "2",
                  "3"
                ]
              },
              "description": "uint32.not_in = [1, 2, 3]\n"
            },
            "title": "uint32_not_in"
          },
          "uint32Lt": {
            "exclusiveMaximum": 42,
            "type": "integer",
            "title": "uint32_lt",
            "description": "uint32.lt = 42\n"
          },
          "uint32Lte": {
            "type": "integer",
            "title": "uint32_lte",
            "maximum": 420,
            "description": "uint32.lte = 420\n"
          },
          "uint32Gt": {
            "exclusiveMinimum": 6,
            "type": "integer",
            "title": "uint32_gt",
            "description": "uint32.gt = 6\nuint32.gt_lt = 6\nuint32.gt_lt_exclusive = 6\nuint32.gt_lte = 6\nuint32.gt_lte_exclusive = 6\n"
          },
          "uint32Gte": {
            "type": "integer",
            "title": "uint32_gte",
            "minimum": 69,
            "description": "uint32.gte = 69\nuint32.gte_lt = 69\nuint32.gte_lt_exclusive = 69\nuint32.gte_lte = 69\nuint32.gte_lte_exclusive = 69\n"
          },
          "uint32Bounds": {
            "exclusiveMaximum": 10,
            "type": "integer",
            "title": "uint32_bounds",
            "minimum": 5,
            "description": "uint32.lt = 10\nuint32.gte = 5\nuint32.gte_lt = 5\nuint32.gte_lt_exclusive = 5\nuint32.gte_lte = 5\nuint32.gte_lte_exclusive = 5\n"
          },
          "uint64Const": {
            "type": [
              "integer",
              "string"
            ],
            "title": "uint64_const",
            "format": "int64",
            "description": "uint64\nuint64.const = 42\n",
            "const": "42"
          },
          "uint64In": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "format": "int64",
              "enum": [
                "1",
                "2",
                "3"
              ],
              "description": "uint64.in = [1, 2, 3]\n"
            },
            "title": "uint64_in"
          },
          "uint64NotIn": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "not": {
                "type": [
                  "integer",
                  "string"
                ],
                "enum": [
                  "1",
                  "2",
                  "3"
                ]
              },
              "format": "int64",
              "description": "uint64.not_in = [1, 2, 3]\n"
            },
            "title": "uint64_not_in"
          },
          "uint64Lt": {
            "exclusiveMaximum": 42,
            "type": [
              "integer",
              "string"
            ],
            "title": "uint64_lt",
            "format": "int64",
            "description": "uint64.lt = 42\n"
          },
          "uint64Lte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "uint64_lte",
            "maximum": 420,
            "format": "int64",
            "description": "uint64.lte = 420\n"
          },
          "uint64Gt": {
            "exclusiveMinimum": 6,
            "type": [
              "integer",
              "string"
            ],
            "title": "uint64_gt",
            "format": "int64",
            "description": "uint64.gt = 6\nuint64.gt_lt = 6\nuint64.gt_lt_exclusive = 6\nuint64.gt_lte = 6\nuint64.gt_lte_exclusive = 6\n"
          },
          "uint64Gte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "uint64_gte",
            "minimum": 69,
            "format": "int64",
            "description": "uint64.gte = 69\nuint64.gte_lt = 69\nuint64.gte_lt_exclusive = 69\nuint64.gte_lte = 69\nuint64.gte_lte_exclusive = 69\n"
          },
          "uint64Bounds": {
            "exclusiveMaximum": 10,
            "type": [
              "integer",
              "string"
            ],
            "title": "uint64_bounds",
            "minimum": 5,
            "format": "int64",
            "description": "uint64.lt = 10\nuint64.gte = 5\nuint64.gte_lt = 5\nuint64.gte_lt_exclusive = 5\nuint64.gte_lte = 5\nuint64.gte_lte_exclusive = 5\n"
          },
          "sint32Const": {
            "type": "integer",
            "title": "sint32_const",
            "format": "int32",
            "description": "sint32\nsint32.const = 42\n",
            "const": 42
          },
          "sint32In": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "enum": [
                1,
                2,
                3
              ],
              "description": "sint32.in = [1, 2, 3]\n"
            },
            "title": "sint32_in"
          },
          "sint32NotIn": {
            "type": "array",
            "items": {
              "type": "integer",
              "not": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3
                ]
              },
              "format": "int32",
              "description": "sint32.not_in = [1, 2, 3]\n"
            },
            "title": "sint32_not_in"
          },
          "sint32Lt": {
            "exclusiveMaximum": 42,
            "type": "integer",
            "title": "sint32_lt",
            "format": "int32",
            "description": "sint32.lt = 42\n"
          },
          "sint32Lte": {
            "type": "integer",
            "title": "sint32_lte",
            "maximum": 420,
            "format": "int32",
            "description": "sint32.lte = 420\n"
          },
          "sint32Gt": {
            "exclusiveMinimum": 6,
            "type": "integer",
            "title": "sint32_gt",
            "format": "int32",
            "description": "sint32.gt = 6\nsint32.gt_lt = 6\nsint32.gt_lt_exclusive = 6\nsint32.gt_lte = 6\nsint32.gt_lte_exclusive = 6\n"
          },
          "sint32Gte": {
            "type": "integer",
            "title": "sint32_gte",
            "minimum": 69,
            "format": "int32",
            "description": "sint32.gte = 69\nsint32.gte_lt = 69\nsint32.gte_lt_exclusive = 69\nsint32.gte_lte = 69\nsint32.gte_lte_exclusive = 69\n"
          },
          "sint32Bounds": {
            "exclusiveMaximum": 10,
            "type": "integer",
            "title": "sint32_bounds",
            "minimum": 5,
            "format": "int32",
            "description": "sint32.lt = 10\nsint32.gte = 5\nsint32.gte_lt = 5\nsint32.gte_lt_exclusive = 5\nsint32.gte_lte = 5\nsint32.gte_lte_exclusive = 5\n"
          },
          "sint64Const": {
            "type": [
              "integer",
              "string"
            ],
            "title": "sint64_const",
            "format": "int64",
            "description": "sint64\nsint64.const = 42\n",
            "const": 42
          },
          "sint64In": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "format": "int64",
              "enum": [
                1,
                2,
                3
              ],
              "description": "sint64.in = [1, 2, 3]\n"
            },
            "title": "sint64_in"
          },
          "sint64NotIn": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "not": {
                "type": [
                  "integer",
                  "string"
                ],
                "enum": [
                  1,
                  2,
                  3
                ]
              },
              "format": "int64",
              "description": "sint64.not_in = [1, 2, 3]\n"
            },
            "title": "sint64_not_in"
          },
          "sint64Lt": {
            "exclusiveMaximum": 42,
            "type": [
              "integer",
              "string"
            ],
            "title": "sint64_lt",
            "format": "int64",
            "description": "sint64.lt = 42\n"
          },
          "sint64Lte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "sint64_lte",
            "maximum": 420,
            "format": "int64",
            "description": "sint64.lte = 420\n"
          },
          "sint64Gt": {
            "exclusiveMinimum": 8,
            "type": [
              "integer",
              "string"
            ],
            "title": "sint64_gt",
            "format": "int64",
            "description": "sint64.gt = 8\nsint64.gt_lt = 8\nsint64.gt_lt_exclusive = 8\nsint64.gt_lte = 8\nsint64.gt_lte_exclusive = 8\n"
          },
          "sint64Gte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "sint64_gte",
            "minimum": 89,
            "format": "int64",
            "description": "sint64.gte = 89\nsint64.gte_lt = 89\nsint64.gte_lt_exclusive = 89\nsint64.gte_lte = 89\nsint64.gte_lte_exclusive = 89\n"
          },
          "sint64Bounds": {
            "exclusiveMaximum": 10,
            "type": [
              "integer",
              "string"
            ],
            "title": "sint64_bounds",
            "minimum": 5,
            "format": "int64",
            "description": "sint64.lt = 10\nsint64.gte = 5\nsint64.gte_lt = 5\nsint64.gte_lt_exclusive = 5\nsint64.gte_lte = 5\nsint64.gte_lte_exclusive = 5\n"
          },
          "fixed32Const": {
            "type": "integer",
            "title": "fixed32_const",
            "description": "fixed32\nfixed32.const = 42\n",
            "const": "42"
          },
          "fixed32In": {
            "type": "array",
            "items": {
              "type": "integer",
              "enum": [
                "1",
                "2",
                "3"
              ],
              "description": "fixed32.in = [1, 2, 3]\n"
            },
            "title": "fixed32_in"
          },
          "fixed32NotIn": {
            "type": "array",
            "items": {
              "type": "integer",
              "not": {
                "type": "integer",
                "enum": [
                  "1",
                  "2",
                  "3"
                ]
              },
              "description": "fixed32.not_in = [1, 2, 3]\n"
            },
            "title": "fixed32_not_in"
          },
          "fixed32Lt": {
            "exclusiveMaximum": 42,
            "type": "integer",
            "title": "fixed32_lt",
            "description": "fixed32.lt = 42\n"
          },
          "fixed32Lte": {
            "type": "integer",
            "title": "fixed32_lte",
            "maximum": 420,
            "description": "fixed32.lte = 420\n"
          },
          "fixed32Gt": {
            "exclusiveMinimum": 6,
            "type": "integer",
            "title": "fixed32_gt",
            "description": "fixed32.gt = 6\nfixed32.gt_lt = 6\nfixed32.gt_lt_exclusive = 6\nfixed32.gt_lte = 6\nfixed32.gt_lte_exclusive = 6\n"
          },
          "fixed32Gte": {
            "type": "integer",
            "title": "fixed32_gte",
            "minimum": 69,
            "description": "fixed32.gte = 69\nfixed32.gte_lt = 69\nfixed32.gte_lt_exclusive = 69\nfixed32.gte_lte = 69\nfixed32.gte_lte_exclusive = 69\n"
          },
          "fixed32Bounds": {
            "exclusiveMaximum": 10,
            "type": "integer",
            "title": "fixed32_bounds",
            "minimum": 5,
            "description": "fixed32.lt = 10\nfixed32.gte = 5\nfixed32.gte_lt = 5\nfixed32.gte_lt_exclusive = 5\nfixed32.gte_lte = 5\nfixed32.gte_lte_exclusive = 5\n"
          },
          "fixed64Const": {
            "type": [
              "integer",
              "string"
            ],
            "title": "fixed64_const",
            "format": "int64",
            "description": "fixed64\nfixed64.const = 42\n",
            "const": "42"
          },
          "fixed64In": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "format": "int64",
              "enum": [
                "1",
                "2",
                "3"
              ],
              "description": "fixed64.in = [1, 2, 3]\n"
            },
            "title": "fixed64_in"
          },
          "fixed64NotIn": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "not": {
                "type": [
                  "integer",
                  "string"
                ],
                "enum": [
                  "1",
                  "2",
                  "3"
                ]
              },
              "format": "int64",
              "description": "fixed64.not_in = [1, 2, 3]\n"
            },
            "title": "fixed64_not_in"
          },
          "fixed64Lt": {
            "exclusiveMaximum": 42,
            "type": [
              "integer",
              "string"
            ],
            "title": "fixed64_lt",
            "format": "int64",
            "description": "fixed64.lt = 42\n"
          },
          "fixed64Lte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "fixed64_lte",
            "maximum": 420,
            "format": "int64",
            "description": "fixed64.lte = 420\n"
          },
          "fixed64Gt": {
            "exclusiveMinimum": 10,
            "type": [
              "integer",
              "string"
            ],
            "title": "fixed64_gt",
            "format": "int64",
            "description": "fixed64.gt = 10\nfixed64.gt_lt = 10\nfixed64.gt_lt_exclusive = 10\nfixed64.gt_lte = 10\nfixed64.gt_lte_exclusive = 10\n"
          },
          "fixed64Gte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "fixed64_gte",
            "minimum": 109,
            "format": "int64",
            "description": "fixed64.gte = 109\nfixed64.gte_lt = 109\nfixed64.gte_lt_exclusive = 109\nfixed64.gte_lte = 109\nfixed64.gte_lte_exclusive = 109\n"
          },
          "fixed64Bounds": {
            "exclusiveMaximum": 10,
            "type": [
              "integer",
              "string"
            ],
            "title": "fixed64_bounds",
            "minimum": 5,
            "format": "int64",
            "description": "fixed64.lt = 10\nfixed64.gte = 5\nfixed64.gte_lt = 5\nfixed64.gte_lt_exclusive = 5\nfixed64.gte_lte = 5\nfixed64.gte_lte_exclusive = 5\n"
          },
          "sfixed32Const": {
            "type": "integer",
            "title": "sfixed32_const",
            "format": "int32",
            "description": "sfixed32\nsfixed32.const = 42\n",
            "const": 42
          },
          "sfixed32In": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "enum": [
                1,
                2,
                3
              ],
              "description": "sfixed32.in = [1, 2, 3]\n"
            },
            "title": "sfixed32_in"
          },
          "sfixed32NotIn": {
            "type": "array",
            "items": {
              "type": "integer",
              "not": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3
                ]
              },
              "format": "int32",
              "description": "sfixed32.not_in = [1, 2, 3]\n"
            },
            "title": "sfixed32_not_in"
          },
          "sfixed32Lt": {
            "exclusiveMaximum": 42,
            "type": "integer",
            "title": "sfixed32_lt",
            "format": "int32",
            "description": "sfixed32.lt = 42\n"
          },
          "sfixed32Lte": {
            "type": "integer",
            "title": "sfixed32_lte",
            "maximum": 420,
            "format": "int32",
            "description": "sfixed32.lte = 420\n"
          },
          "sfixed32Gt": {
            "exclusiveMinimum": 6,
            "type": "integer",
            "title": "sfixed32_gt",
            "format": "int32",
            "description": "sfixed32.gt = 6\nsfixed32.gt_lt = 6\nsfixed32.gt_lt_exclusive = 6\nsfixed32.gt_lte = 6\nsfixed32.gt_lte_exclusive = 6\n"
          },
          "sfixed32Gte": {
            "type": "integer",
            "title": "sfixed32_gte",
            "minimum": 69,
            "format": "int32",
            "description": "sfixed32.gte = 69\nsfixed32.gte_lt = 69\nsfixed32.gte_lt_exclusive = 69\nsfixed32.gte_lte = 69\nsfixed32.gte_lte_exclusive = 69\n"
          },
          "sfixed32Bounds": {
            "exclusiveMaximum": 10,
            "type": "integer",
            "title": "sfixed32_bounds",
            "minimum": 5,
            "format": "int32",
            "description": "sfixed32.lt = 10\nsfixed32.gte = 5\nsfixed32.gte_lt = 5\nsfixed32.gte_lt_exclusive = 5\nsfixed32.gte_lte = 5\nsfixed32.gte_lte_exclusive = 5\n"
          },
          "sfixed64Const": {
            "type": [
              "integer",
              "string"
            ],
            "title": "sfixed64_const",
            "format": "int64",
            "description": "sfixed64\nsfixed64.const = 42\n",
            "const": 42
          },
          "sfixed64In": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "format": "int64",
              "enum": [
                1,
                2,
                3
              ],
              "description": "sfixed64.in = [1, 2, 3]\n"
            },
            "title": "sfixed64_in"
          },
          "sfixed64NotIn": {
            "type": "array",
            "items": {
              "type": [
                "integer",
                "string"
              ],
              "not": {
                "type": [
                  "integer",
                  "string"
                ],
                "enum": [
                  1,
                  2,
                  3
                ]
              },
              "format": "int64",
              "description": "sfixed64.not_in = [1, 2, 3]\n"
            },
            "title": "sfixed64_not_in"
          },
          "sfixed64Lt": {
            "exclusiveMaximum": 42,
            "type": [
              "integer",
              "string"
            ],
            "title": "sfixed64_lt",
            "format": "int64",
            "description": "sfixed64.lt = 42\n"
          },
          "sfixed64Lte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "sfixed64_lte",
            "maximum": 420,
            "format": "int64",
            "description": "sfixed64.lte = 420\n"
          },
          "sfixed64Gt": {
            "exclusiveMinimum": 10,
            "type": [
              "integer",
              "string"
            ],
            "title": "sfixed64_gt",
            "format": "int64",
            "description": "sfixed64.gt = 10\nsfixed64.gt_lt = 10\nsfixed64.gt_lt_exclusive = 10\nsfixed64.gt_lte = 10\nsfixed64.gt_lte_exclusive = 10\n"
          },
          "sfixed64Gte": {
            "type": [
              "integer",
              "string"
            ],
            "title": "sfixed64_gte",
            "minimum": 109,
            "format": "int64",
            "description": "sfixed64.gte = 109\nsfixed64.gte_lt = 109\nsfixed64.gte_lt_exclusive = 109\nsfixed64.gte_lte = 109\nsfixed64.gte_lte_exclusive = 109\n"
          },
          "sfixed64Bounds": {
            "exclusiveMaximum": 10,
            "type": [
              "integer",
              "string"
            ],
            "title": "sfixed64_bounds",
            "minimum": 5,
            "format": "int64",
            "description": "sfixed64.lt = 10\nsfixed64.gte = 5\nsfixed64.gte_lt = 5\nsfixed64.gte_lt_exclusive = 5\nsfixed64.gte_lte = 5\nsfixed64.gte_lte_exclusive = 5\n"
          },
          "stringConst": {
            "type": "string",
            "title": "string_const",
            "description": "string\nstring.const = \"hello\"\n",
            "const": "hello"
          },
          "stringIn": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "orange",
                "grape"
              ],
              "description": "string.in = [\"orange\", \"grape\"]\n"
            },
            "title": "string_in"
          },
          "stringNotIn": {
            "type": "array",
            "items": {
              "type": "string",
              "not": {
                "type": "string",
                "enum": [
                  "orange",
                  "grape"
                ]
              },
              "description": "string.not_in = [\"orange\", \"grape\"]\n"
            },
            "title": "string_not_in"
          },
          "stringMinLen": {
            "type": "string",
            "title": "string_min_len",
            "minLength": 3,
            "description": "string.min_len = 3\n"
          },
          "stringMaxLen": {
            "type": "string",
            "title": "string_max_len",
            "maxLength": 10,
            "description": "string.max_len = 10\n"
          },
          "stringLen": {
            "type": "string",
            "title": "string_len",
            "maxLength": 10,
            "minLength": 10,
            "description": "string.len = 10\n"
          },
          "stringLenBytes": {
            "type": "string",
            "title": "string_len_bytes",
            "description": "string.len_bytes = 10\n"
          },
          "stringMinBytes": {
            "type": "string",
            "title": "string_min_bytes",
            "description": "string.min_bytes = 10\n"
          },
          "stringMaxBytes": {
            "type": "string",
            "title": "string_max_bytes",
            "description": "string.max_bytes = 10\n"
          },
          "stringPrefix": {
            "type": "string",
            "title": "string_prefix",
            "description": "string.prefix = \"pre\"\n"
          },
          "stringSuffix": {
            "type": "string",
            "title": "string_suffix",
            "description": "string.suffix = \"post\"\n"
          },
          "stringContains": {
            "type": "string",
            "title": "string_contains",
            "description": "string.contains = \"inside\"\n"
          },
          "stringNotContains": {
            "type": "string",
            "title": "string_not_contains",
            "description": "string.not_contains = \"inside\"\n"
          },
          "stringStrict": {
            "type": "string",
            "title": "string_strict",
            "description": "string.well_known_regex.header_name = KNOWN_REGEX_HTTP_HEADER_VALUE // value must be a valid HTTP header name\nstring.well_known_regex.header_name_empty = KNOWN_REGEX_HTTP_HEADER_VALUE // value is empty, which is not a valid HTTP header name\nstring.well_known_regex.header_value = KNOWN_REGEX_HTTP_HEADER_VALUE // value must be a valid HTTP header value\n"
          },
          "stringEmail": {
            "type": "string",
            "title": "string_email",
            "format": "email",
            "description": "string.email = true // value must be a valid email address\nstring.email_empty = true // value is empty, which is not a valid email address\n"
          },
          "stringHostname": {
            "type": "string",
            "title": "string_hostname",
            "format": "hostname",
            "description": "string.hostname = true // value must be a valid hostname\nstring.hostname_empty = true // value is empty, which is not a valid hostname\n"
          },
          "stringIp": {
            "type": "string",
            "title": "string_ip",
            "format": "ip",
            "description": "string.ip = true // value must be a valid IP address\nstring.ip_empty = true // value is empty, which is not a valid IP address\n"
          },
          "stringIpv4": {
            "type": "string",
            "title": "string_ipv4",
            "format": "ipv4",
            "description": "string.ipv4 = true // value must be a valid IPv4 address\nstring.ipv4_empty = true // value is empty, which is not a valid IPv4 address\n"
          },
          "stringIpv6": {
            "type": "string",
            "title": "string_ipv6",
            "format": "ipv6",
            "description": "string.ipv6 = true // value must be a valid IPv6 address\nstring.ipv6_empty = true // value is empty, which is not a valid IPv6 address\n"
          },
          "stringUri": {
            "type": "string",
            "title": "string_uri",
            "format": "uri",
            "description": "string.uri = true // value must be a valid URI\nstring.uri_empty = true // value is empty, which is not a valid URI\n"
          },
          "stringUriRef": {
            "type": "string",
            "title": "string_uri_ref",
            "format": "uri-ref",
            "description": "string.uri_ref = true // value must be a valid URI Reference\n"
          },
          "stringAddress": {
            "type": "string",
            "title": "string_address",
            "format": "address",
            "description": "string.address = true // value must be a valid hostname, or ip address\nstring.address_empty = true // value is empty, which is not a valid hostname, or ip address\n"
          },
          "stringUuid": {
            "type": "string",
            "title": "string_uuid",
            "format": "uuid",
            "description": "string.uuid = true // value must be a valid UUID\nstring.uuid_empty = true // value is empty, which is not a valid UUID\n"
          },
          "stringIpWithPrefixlen": {
            "type": "string",
            "title": "string_ip_with_prefixlen",
            "description": "string.ip_with_prefixlen = true // value must be a valid IP prefix\nstring.ip_with_prefixlen_empty = true // value is empty, which is not a valid IP prefix\n"
          },
          "stringIpv4WithPrefixlen": {
            "type": "string",
            "title": "string_ipv4_with_prefixlen",
            "description": "string.ipv4_with_prefixlen = true // value must be a valid IPv4 address with prefix length\nstring.ipv4_with_prefixlen_empty = true // value is empty, which is not a valid IPv4 address with prefix length\n"
          },
          "stringIpv6WithPrefixlen": {
            "type": "string",
            "title": "string_ipv6_with_prefixlen",
            "description": "string.ipv6_with_prefixlen = true // value must be a valid IPv6 address with prefix length\nstring.ipv6_with_prefixlen_empty = true // value is empty, which is not a valid IPv6 address with prefix length\n"
          },
          "stringIpPrefix": {
            "type": "string",
            "title": "string_ip_prefix",
            "description": "string.ip_prefix = true // value must be a valid IP prefix\nstring.ip_prefix_empty = true // value is empty, which is not a valid IP prefix\n"
          },
          "stringIpv4Prefix": {
            "type": "string",
            "title": "string_ipv4_prefix",
            "description": "string.ipv4_prefix = true // value must be a valid IPv4 prefix\nstring.ipv4_prefix_empty = true // value is empty, which is not a valid IPv4 prefix\n"
          },
          "stringIpv6Prefix": {
            "type": "string",
            "title": "string_ipv6_prefix",
            "description": "string.ipv6_prefix = true // value must be a valid IPv6 prefix\nstring.ipv6_prefix_empty = true // value is empty, which is not a valid IPv6 prefix\n"
          },
          "stringHostAndPort": {
            "type": "string",
            "title": "string_host_and_port",
            "description": "string.host_and_port = true // value must be a valid host (hostname or IP address) and port pair\nstring.host_and_port_empty = true // value is empty, which is not a valid host and port pair\n"
          },
          "stringWellKnownRegex": {
            "type": "string",
            "title": "string_well_known_regex",
            "description": "string.well_known_regex.header_name = KNOWN_REGEX_HTTP_HEADER_VALUE // value must be a valid HTTP header name\nstring.well_known_regex.header_name_empty = KNOWN_REGEX_HTTP_HEADER_VALUE // value is empty, which is not a valid HTTP header name\nstring.well_known_regex.header_value = KNOWN_REGEX_HTTP_HEADER_VALUE // value must be a valid HTTP header value\n"
          },
          "byteConst": {
            "type": "string",
            "title": "byte_const",
            "format": "byte",
            "description": "bytes.const = [1 2 3 4]\n",
            "const": "\u0001\u0002\u0003\u0004"
          },
          "byteLen": {
            "type": "string",
            "title": "byte_len",
            "maxLength": 4,
            "minLength": 4,
            "format": "byte",
            "description": "bytes.len = 4\n",
            "nullable": true
          },
          "bytesMinLen": {
            "type": "string",
            "title": "bytes_min_len",
            "minLength": 2,
            "format": "byte",
            "description": "bytes.min_len = 2\n",
            "nullable": true
          },
          "bytesMaxLen": {
            "type": "string",
            "title": "bytes_max_len",
            "maxLength": 6,
            "format": "byte",
            "description": "bytes.max_len = 6\n",
            "nullable": true
          },
          "bytesPattern": {
            "type": "string",
            "title": "bytes_pattern",
            "pattern": "^[a-zA-Z0-9]+$",
            "format": "byte",
            "description": "bytes.pattern = \"^[a-zA-Z0-9]+$\"\n",
            "nullable": true
          },
          "bytesPrefix": {
            "type": "string",
            "title": "bytes_prefix",
            "format": "byte",
            "description": "bytes.prefix = [1 2]\n",
            "nullable": true
          },
          "bytesSuffix": {
            "type": "string",
            "title": "bytes_suffix",
            "format": "byte",
            "description": "bytes.suffix = [3 4]\n",
            "nullable": true
          },
          "bytesContains": {
            "type": "string",
            "title": "bytes_contains",
            "format": "byte",
            "description": "bytes.contains = [2 3]\n",
            "nullable": true
          },
          "bytesIn": {
            "type": "string",
            "title": "bytes_in",
            "format": "byte",
            "enum": [
              "\u0001\u0002",
              "\u0002\u0003",
              "\u0003\u0004"
            ],
            "description": "bytes.in = [[1 2], [2 3], [3 4]]\n",
            "nullable": true
          },
          "bytesNotIn": {
            "type": "string",
            "not": {
              "type": "string",
              "enum": [
                "\u0001\u0002",
                "\u0002\u0003",
                "\u0003\u0004"
              ]
            },
            "title": "bytes_not_in",
            "format": "byte",
            "description": "bytes.not_in = [[1 2], [2 3], [3 4]]\n",
            "nullable": true
          },
          "bytesIp": {
            "type": "string",
            "title": "bytes_ip",
            "format": "ip",
            "description": "bytes.ip = true // value must be a valid IP address\nbytes.ip_empty = true // value is empty, which is not a valid IP address\n",
            "nullable": true
          },
          "bytesIpv4": {
            "type": "string",
            "title": "bytes_ipv4",
            "format": "ipv4",
            "description": "bytes.ipv4 = true // value must be a valid IPv4 address\nbytes.ipv4_empty = true // value is empty, which is not a valid IPv4 address\n",
            "nullable": true
          },
          "bytesIpv6": {
            "type": "string",
            "title": "bytes_ipv6",
            "format": "ipv6",
            "description": "bytes.ipv6 = true // value must be a valid IPv6 address\nbytes.ipv6_empty = true // value is empty, which is not a valid IPv6 address\n",
            "nullable": true
          },
          "enumConst": {
            "title": "enum_const",
            "description": "enum.const = 1\n",
            "const": 1,
            "$ref": "#/components/schemas/protovalidate.MyEnum"
          },
          "enumDefinedOnly": {
            "title": "enum_defined_only",
            "$ref": "#/components/schemas/protovalidate.MyEnum"
          },
          "enumIn": {
            "title": "enum_in",
            "enum": [
              1,
              2
            ],
            "description": "enum.in = [1, 2]\n",
            "$ref": "#/components/schemas/protovalidate.MyEnum"
          },
          "enumNotIn": {
            "not": {
              "enum": [
                1,
                2
              ]
            },
            "title": "enum_not_in",
            "description": "enum.not_in = [1, 2]\n",
            "$ref": "#/components/schemas/protovalidate.MyEnum"
          },
          "repeatedMinItems": {
            "type": "array",
            "items": {
              "type": "string",
              "minItems": 2
            },
            "title": "repeated_min_items",
            "minItems": 2
          },
          "repeatedMaxItems": {
            "type": "array",
            "items": {
              "type": "string",
              "maxItems": 3
            },
            "title": "repeated_max_items",
            "maxItems": 3
          },
          "repeatedUnique": {
            "type": "array",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "title": "repeated_unique",
            "uniqueItems": true
          },
          "repeatedItems": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 10,
              "minLength": 3,
              "description": "string.min_len = 3\nstring.max_len = 10\n"
            },
            "title": "repeated_items"
          },
          "mapMinPairs": {
            "type": "object",
            "title": "map_min_pairs",
            "minProperties": 2,
            "additionalProperties": {
              "type": "string",
              "title": "value"
            }
          },
          "mapMaxPairs": {
            "type": "object",
            "title": "map_max_pairs",
            "maxProperties": 3,
            "additionalProperties": {
              "type": "string",
              "title": "value"
            }
          },
          "mapKeys": {
            "type": "object",
            "title": "map_keys",
            "additionalProperties": {
              "type": "string",
              "title": "value"
            }
          },
          "mapValues": {
            "type": "object",
            "title": "map_values",
            "additionalProperties": {
              "type": "string",
              "title": "value",
              "maxLength": 20,
              "minLength": 5,
              "description": "string.min_len = 5\nstring.max_len = 20\n"
            }
          },
          "anyIn": {
            "title": "any_in",
            "enum": [
              "type.googleapis.com/MyType1",
              "type.googleapis.com/MyType2"
            ],
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "anyNotIn": {
            "not": {
              "enum": [
                "type.googleapis.com/ForbiddenType1",
                "type.googleapis.com/ForbiddenType2"
              ]
            },
            "title": "any_not_in",
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "durationConst": {
            "title": "duration_const",
            "description": "duration.const = 33m20s\n",
            "const": "33m20s",
            "$ref": "#/components/schemas/google.protobuf.Duration"
          },
          "durationIn": {
            "title": "duration_in",
            "enum": [
              "1s",
              "2s",
              "3s"
            ],
            "description": "duration.in = [1s, 2s, 3s]\n",
            "$ref": "#/components/schemas/google.protobuf.Duration"
          },
          "durationNotIn": {
            "not": {
              "enum": [
                "1s",
                "2s",
                "3s"
              ]
            },
            "title": "duration_not_in",
            "description": "duration.not_in = [1s, 2s, 3s]\n",
            "$ref": "#/components/schemas/google.protobuf.Duration"
          },
          "durationLt": {
            "title": "duration_lt",
            "description": "duration.lt = 5s\n",
            "$ref": "#/components/schemas/google.protobuf.Duration"
          },
          "durationLte": {
            "title": "duration_lte",
            "description": "duration.lte = 10s\n",
            "$ref": "#/components/schemas/google.protobuf.Duration"
          },
          "durationLtSeconds": {
            "title": "duration_lt_seconds",
            "description": "duration.lt = 72h0m0s\n",
            "$ref": "#/components/schemas/google.protobuf.Duration"
          },
          "durationGt": {
            "title": "duration_gt",
            "description": "duration.gt = 5s\nduration.gt_lt = 5s\nduration.gt_lt_exclusive = 5s\nduration.gt_lte = 5s\nduration.gt_lte_exclusive = 5s\n",
            "$ref": "#/components/schemas/google.protobuf.Duration"
          },
          "durationRange": {
            "title": "duration_range",
            "description": "duration.lt = 10s\nduration.gt = 5s\nduration.gt_lt = 5s\nduration.gt_lt_exclusive = 5s\nduration.gt_lte = 5s\nduration.gt_lte_exclusive = 5s\n",
            "$ref": "#/components/schemas/google.protobuf.Duration"
          },
          "durationGte": {
            "title": "duration_gte",
            "description": "duration.gte = 5s\nduration.gte_lt = 5s\nduration.gte_lt_exclusive = 5s\nduration.gte_lte = 5s\nduration.gte_lte_exclusive = 5s\n",
            "$ref": "#/components/schemas/google.protobuf.Duration"
          },
          "timestampConst": {
            "title": "timestamp_const",
            "description": "This is a constant timestamp!\ntimestamp.const = 2024-10-03T23:40:00Z\n",
            "const": "2024-10-03 23:40:00 +0000 UTC",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "timestampWithin": {
            "title": "timestamp_within",
            "description": "timestamp.within = 1h0m0s\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "timestampLt": {
            "title": "timestamp_lt",
            "description": "timestamp.lte = 2023-03-15T08:00:00Z\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "timestampLte": {
            "title": "timestamp_lte",
            "description": "timestamp.lte = 2023-03-15T08:00:00Z\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "timestampGt": {
            "title": "timestamp_gt",
            "description": "timestamp.gt = 2022-12-31T00:00:00Z\ntimestamp.gt_lt = 2022-12-31T00:00:00Z\ntimestamp.gt_lt_exclusive = 2022-12-31T00:00:00Z\ntimestamp.gt_lte = 2022-12-31T00:00:00Z\ntimestamp.gt_lte_exclusive = 2022-12-31T00:00:00Z\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "timestampGte": {
            "title": "timestamp_gte",
            "description": "timestamp.gte = 2022-12-31T00:00:00Z\ntimestamp.gte_lt = 2022-12-31T00:00:00Z\ntimestamp.gte_lt_exclusive = 2022-12-31T00:00:00Z\ntimestamp.gte_lte = 2022-12-31T00:00:00Z\ntimestamp.gte_lte_exclusive = 2022-12-31T00:00:00Z\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "timestampRange": {
            "title": "timestamp_range",
            "description": "timestamp.lt = 2023-01-01T00:00:00Z\ntimestamp.gt = 2022-12-31T00:00:00Z\ntimestamp.gt_lt = 2022-12-31T00:00:00Z\ntimestamp.gt_lt_exclusive = 2022-12-31T00:00:00Z\ntimestamp.gt_lte = 2022-12-31T00:00:00Z\ntimestamp.gt_lte_exclusive = 2022-12-31T00:00:00Z\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "timestampLtNow": {
            "title": "timestamp_lt_now",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "timestampGtNow": {
            "title": "timestamp_gt_now",
            "description": "timestamp.gt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "boolConstTrue": {
            "type": "boolean",
            "title": "bool_const_true",
            "description": "bool.const = true\n",
            "const": "true"
          },
          "boolConstFalse": {
            "type": "boolean",
            "title": "bool_const_false",
            "description": "bool.const = false\n",
            "const": "false"
          }
        },
        "title": "LotsOfValidationRules",
        "required": [
          "requiredField"
        ],
        "additionalProperties": false
      },
      "protovalidate.LotsOfValidationRules.MapKeysEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "type": "string",
            "title": "value"
          }
        },
        "title": "MapKeysEntry",
        "additionalProperties": false
      },
      "protovalidate.LotsOfValidationRules.MapMaxPairsEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "type": "string",
            "title": "value"
          }
        },
        "title": "MapMaxPairsEntry",
        "additionalProperties": false
      },
      "protovalidate.LotsOfValidationRules.MapMinPairsEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "type": "string",
            "title": "value"
          }
        },
        "title": "MapMinPairsEntry",
        "additionalProperties": false
      },
      "protovalidate.LotsOfValidationRules.MapValuesEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key"
          },
          "value": {
            "type": "string",
            "title": "value"
          }
        },
        "title": "MapValuesEntry",
        "additionalProperties": false
      },
      "protovalidate.MyOtherMessage": {
        "type": "object",
        "title": "MyOtherMessage",
        "additionalProperties": false
      },
      "protovalidate.OneOfMessage": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "a": {
                "type": "string",
                "title": "a",
                "minLength": 1,
                "description": "string.min_len = 1\n"
              }
            },
            "title": "a",
            "required": [
              "a"
            ]
          },
          {
            "properties": {
              "b": {
                "type": "string",
                "title": "b"
              }
            },
            "title": "b",
            "required": [
              "b"
            ]
          }
        ],
        "title": "OneOfMessage",
        "additionalProperties": false
      },
      "connect-protocol-version": {
        "type": "number",
        "title": "Connect-Protocol-Version",
        "enum": [
          1
        ],
        "description": "Define the version of the Connect protocol",
        "const": 1
      },
      "connect-timeout-header": {
        "type": "number",
        "title": "Connect-Timeout-Ms",
        "description": "Define the timeout, in ms"
      },
      "connect.error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "examples": [
              "not_found"
            ],
            "enum": [
              "canceled",
              "unknown",
              "invalid_argument",
              "deadline_exceeded",
              "not_found",
              "already_exists",
              "permission_denied",
              "resource_exhausted",
              "failed_precondition",
              "aborted",
              "out_of_range",
              "unimplemented",
              "internal",
              "unavailable",
              "data_loss",
              "unauthenticated"
            ],
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          },
          "message": {
            "type": "string",
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connect.error_details.Any"
            },
            "description": "A list of messages that carry the error details. There is no limit on the number of messages."
          }
        },
        "title": "Connect Error",
        "additionalProperties": true,
        "description": "Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation"
      },
      "connect.error_details.Any": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A URL that acts as a globally unique identifier for the type of the serialized message. For example: `type.googleapis.com/google.rpc.ErrorInfo`. This is used to determine the schema of the data in the `value` field and is the discriminator for the `debug` field."
          },
          "value": {
            "type": "string",
            "format": "binary",
            "description": "The Protobuf message, serialized as bytes and base64-encoded. The specific message type is identified by the `type` field."
          },
          "debug": {
            "oneOf": [
              {
                "type": "object",
                "title": "Any",
                "additionalProperties": true,
                "description": "Detailed error information."
              }
            ],
            "discriminator": {
              "propertyName": "type"
            },
            "title": "Debug",
            "description": "Deserialized error detail payload. The 'type' field indicates the schema. This field is for easier debugging and should not be relied upon for application logic."
          }
        },
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message, with an additional debug field for ConnectRPC error details."
      }
    }
  },
  "security": [],
  "tags": [
    {
      "name": "protovalidate.MessageFields"
    },
    {
      "name": "protovalidate.FieldsService"
    }
  ]
}