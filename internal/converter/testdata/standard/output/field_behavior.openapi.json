{
  "openapi": "3.1.0",
  "info": {
    "title": "field_behavior",
    "description": "## field_behavior.Service"
  },
  "paths": {
    "/v1/{user_id}": {
      "get": {
        "tags": [
          "field_behavior.Service"
        ],
        "summary": "Method",
        "operationId": "field_behavior.Service.Method",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "user_id",
              "format": "int32",
              "description": "(IDENTIFIER) ",
              "readOnly": true
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "name"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string",
              "title": "password",
              "writeOnly": true
            }
          },
          {
            "name": "nickName",
            "in": "query",
            "schema": {
              "type": "string",
              "title": "nick_name",
              "description": "(OPTIONAL) "
            }
          },
          {
            "name": "internalId",
            "in": "query",
            "schema": {
              "type": "string",
              "title": "internal_id",
              "description": "(IMMUTABLE) "
            }
          },
          {
            "name": "otherAttr",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "(UNORDERED_LIST) "
              },
              "title": "other_attr",
              "description": "(UNORDERED_LIST) "
            }
          },
          {
            "name": "allBehaviors",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "all_behaviors",
              "description": "(IDENTIFIER) (OPTIONAL) (NON_EMPTY_DEFAULT) (UNORDERED_LIST) (IMMUTABLE) (OPTIONAL) ",
              "readOnly": true,
              "writeOnly": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field_behavior.User"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "field_behavior.User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name"
          },
          "userId": {
            "type": "integer",
            "title": "user_id",
            "format": "int32",
            "description": "(IDENTIFIER) ",
            "readOnly": true
          },
          "password": {
            "type": "string",
            "title": "password",
            "writeOnly": true
          },
          "nickName": {
            "type": "string",
            "title": "nick_name",
            "description": "(OPTIONAL) "
          },
          "internalId": {
            "type": "string",
            "title": "internal_id",
            "description": "(IMMUTABLE) "
          },
          "otherAttr": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "(UNORDERED_LIST) "
            },
            "title": "other_attr",
            "description": "(UNORDERED_LIST) "
          },
          "allBehaviors": {
            "type": "string",
            "title": "all_behaviors",
            "description": "(IDENTIFIER) (OPTIONAL) (NON_EMPTY_DEFAULT) (UNORDERED_LIST) (IMMUTABLE) (OPTIONAL) ",
            "readOnly": true,
            "writeOnly": true
          }
        },
        "title": "User",
        "required": [
          "name",
          "allBehaviors"
        ],
        "additionalProperties": false
      },
      "connect-protocol-version": {
        "type": "number",
        "title": "Connect-Protocol-Version",
        "enum": [
          1
        ],
        "description": "Define the version of the Connect protocol",
        "const": 1
      },
      "connect-timeout-header": {
        "type": "number",
        "title": "Connect-Timeout-Ms",
        "description": "Define the timeout, in ms"
      },
      "connect.error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "examples": [
              "not_found"
            ],
            "enum": [
              "canceled",
              "unknown",
              "invalid_argument",
              "deadline_exceeded",
              "not_found",
              "already_exists",
              "permission_denied",
              "resource_exhausted",
              "failed_precondition",
              "aborted",
              "out_of_range",
              "unimplemented",
              "internal",
              "unavailable",
              "data_loss",
              "unauthenticated"
            ],
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          },
          "message": {
            "type": "string",
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connect.error_details.Any"
            },
            "description": "A list of messages that carry the error details. There is no limit on the number of messages."
          }
        },
        "title": "Connect Error",
        "additionalProperties": true,
        "description": "Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation"
      },
      "connect.error_details.Any": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A URL that acts as a globally unique identifier for the type of the serialized message. For example: `type.googleapis.com/google.rpc.ErrorInfo`. This is used to determine the schema of the data in the `value` field and is the discriminator for the `debug` field."
          },
          "value": {
            "type": "string",
            "format": "binary",
            "description": "The Protobuf message, serialized as bytes and base64-encoded. The specific message type is identified by the `type` field."
          },
          "debug": {
            "oneOf": [
              {
                "type": "object",
                "title": "Any",
                "additionalProperties": true,
                "description": "Detailed error information."
              }
            ],
            "discriminator": {
              "propertyName": "type"
            },
            "title": "Debug",
            "description": "Deserialized error detail payload. The 'type' field indicates the schema. This field is for easier debugging and should not be relied upon for application logic."
          }
        },
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message, with an additional debug field for ConnectRPC error details."
      }
    }
  },
  "security": [],
  "tags": [
    {
      "name": "field_behavior.Service"
    }
  ]
}