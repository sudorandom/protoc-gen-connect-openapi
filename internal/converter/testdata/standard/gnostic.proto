syntax = "proto3";

package example_with_gnostic;

import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";

option (gnostic.openapi.v3.document) = {
  info: {
    title: "Title from annotation"
    version: "Version from annotation"
    description: "Description from annotation"
    contact: {
      name: "Contact Name"
      url: "https://github.com/sudorandom/protoc-gen-connect-openapi"
      email: "hello@sudorandom.com"
    }
    license: {
      name: "MIT License"
      url: "https://github.com/sudorandom/protoc-gen-connect-openapi/blob/master/LICENSE"
    }
  }
  components: {
    parameters: {
      additional_properties: [
        {
          name: "filter_mask"
          value: {
            parameter: {
              name: "X-TEST-HEADER"
              in: "header"
              description: "This header is used to filter results, please refer to AIP-160 for more information"
              schema: {
                schema: {type: "string"}
              }
              example: {yaml: "'msg_12345'"} /* Use quotes appropriate for proto string literal containing YAML */
            }
          }
        }
      ]
    }
    security_schemes: {
      additional_properties: [
        {
          name: "BasicAuth"
          value: {
            security_scheme: {
              type: "http"
              scheme: "basic"
            }
          }
        }
      ]
    }
  }
};

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello(HelloRequest) returns (HelloReply) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (gnostic.openapi.v3.operation) = {
      responses: {
        response_or_reference: {
          name: "404"
          value: {
            response: {
              description: "user is not found"
              headers: {
                additional_properties: {
                  name: "filter_mask"
                  value: {
                    reference: {_ref: "#/components/parameters/filter_mask"}
                  }
                }
              }
              content: {
                additional_properties: {
                  name: "application/json"
                  value: {
                    schema: {
                      reference: {_ref: "#/components/schemas/connect.error"}
                    }
                  }
                }
              }
            }
          }
        }
      }
      deprecated: true
      security: [
        {
          additional_properties: [
            {
              name: "BasicAuth"
              value: {
                value: []
              }
            }
          ]
        }
      ]
    };
  }

  rpc SayHello2(HelloRequest) returns (HelloReply) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (google.api.http).get = "/v1/path/to/say-hello2";
    option (gnostic.openapi.v3.operation) = {
      tags: ["extra-tag"]
      responses: {
        default: {
          reference: {_ref: "#/components/schemas/example_with_gnostic.HelloReply"}
        }
      }
    };
  }
}

// The request message containing the user's name.
message HelloRequest {
  option (gnostic.openapi.v3.schema) = {
    title: "Custom title for a message"
    description: "Custom description for a message"
  };

  string name = 1 [(gnostic.openapi.v3.property) = {
    title: "Custom title for a field"
    description: "Custom description for a field"
    example: {yaml: "Example value"}
    nullable: true
    read_only: false
    write_only: false
    external_docs: {
      description: "example"
      url: "https://example.com"
    }
    deprecated: true
    additional_properties: {boolean: false}
    max_length: 1000
    min_length: 3
    pattern: "/^[a-z ,.'-]+$/i"
  }];
  int32 number = 2 [(gnostic.openapi.v3.property) = {
    multiple_of: 20
    exclusive_maximum: true
    exclusive_minimum: true
    minimum: 20
    maximum: 1000
  }];
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}
